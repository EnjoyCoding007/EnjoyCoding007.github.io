<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[非越狱下iOS代码注入&微信登录HOOK]]></title>
    <url>%2F2019%2F02%2F10%2F%E9%9D%9E%E8%B6%8A%E7%8B%B1%E4%B8%8BiOS%E4%BB%A3%E7%A0%81%E6%B3%A8%E5%85%A5%26%E5%BE%AE%E4%BF%A1%E7%99%BB%E5%BD%95HOOK%2F</url>
    <content type="text"><![CDATA[&emsp;在之前这篇iOS应用脚本重签名中，我们对脱壳的微信安装包进行重签名，并成功在真机上运行起来，完成了iOS逆向的准备工作。这一篇我们将通过演示如何HOOK微信登录事件并获取到用户密码，把iOS代码注入的几种方式串起来做个简单地概述。不管做逆向还是正向开发，这些都能为你提供一些在应用安全攻防方面的思路。&emsp;当拿到别人的脱壳包，想要HOOK别人的方法做些小插件，首先需要程序执行你写的代码，你才有机会利用runtime的运行时机制去做自己的事情，关于方法混淆的注意事项请参考这一篇。让程序执行我们写的代码就需要修改MachO文件，关于MachO我在这一篇里详细讲解了，这篇主要讲代码注入的事儿： Framework注入 添加自己的Framework： 写好测试代码，在上一篇重签名脚本的基础上加一行修改MachO加载路径的代码：yololib &quot;$TARGET_APP_PATH/$APP_BINARY&quot; &quot;Frameworks/SharonFramework.framework/SharonFramework&quot;，Framework文件名为你自己刚刚添加的。直接Run！大功告成。 Dylib注入 添加自己的Dylib：&emsp;要注意的是这样添加的MacOS的Dylib需要将BuildSetting–&gt;Base SDK改为iOS，BuildSetting–&gt;CODE SIGN IDENTITY改为iPhone Developer即可在iPhone上运行。另外，与Framework不同的是它需要手动添加关联库：同样在重签名脚本中加一行修改MachO可执行文件路径的代码：yololib &quot;$TARGET_APP_PATH/$APP_BINARY&quot; &quot;Frameworks/libSharonLibrary.dylib&quot;，dylib文件名为你自己刚刚添加的。直接Run！ &emsp;至此我们已经完成了代码注入的第一步，让别人的应用在运行时执行我们写的代码，这个过程中你可能会碰到签名不成功等各种各样的奇葩问题，不要慌，静下心分析，实在不行你可以留言^_^ ~，接下来我们要尝试HOOK微信的登录按钮事件。 &emsp;同步几个共识： +load 方法的调用发生在类或分类被 runtime 加载（编译后的可执行文件被装载到内存中）时，只调用1次。 子类的 +load 方法会在它的所有父类的 +load 方法之后执行，而分类的 +load 方法会在它的主类的 +load 方法之后执行。 如果子类没有实现 +load 方法，那么当它被加载时 runtime 是不会去调用父类的 +load 方法的。同理，当一个类和它的分类都实现了 +load 方法时，两个方法都会被调用。 不同的类之间的 +load 方法的调用顺序是不确定的。 基于+load方法的上述特点，它是实现方法混淆的最佳入口。 通过viewDebug+头文件分析目标Method如上图所示，我们很快定位到登录按钮的target为WCAccountLoginControlLogic，action为onFirstViewLogin，我们在通过头文件分析一下，class-dump怎么用相信你Google一下就搞得定，这里就不赘述啦，拿到微信的所有头文件丢到sublime里全局搜索：果然，找到了目标文件，点击进入头文件查看Method列表：验证了我们的分析是正确的。用同样的方式我们定位账号密码输入页登录按钮的target为WCAccountMainLoginViewController，action为onNext：我们将通过HOOK登录按钮点击事件获取密码输入框里的内容。 MethodSwizzling的几种姿势 class_replaceMethodclass_replaceMethod本身会尝试调用class_addMethod和method_setImplementation，所以直接调用class_replaceMethod就可以了。 class_getInstanceMethod &amp; method_setImplementation method_exchangeImplementations 心细的同学一定会发现，在这个场景下，如果直接写个OC方法然后用method_exchangeImplementations交换新旧方法的实现有问题：因为my_next中的self是WCAccountMainLoginViewController，调用my_next会找不到方法。解决方案是手动为WCAccountMainLoginViewController添加my_next方法。&emsp;由此我们也发现，method_exchangeImplementations在分类或子类中对主/父类重载的方法进行交换时更方便些，不会出现上述问题。所以在逆向中一般不直接使用method_exchangeImplementations，更倾向于前两种方式。]]></content>
  </entry>
  <entry>
    <title><![CDATA[走出区块链认知的误区]]></title>
    <url>%2F2019%2F01%2F31%2F%E8%B5%B0%E5%87%BA%E5%8C%BA%E5%9D%97%E9%93%BE%E8%AE%A4%E7%9F%A5%E7%9A%84%E8%AF%AF%E5%8C%BA%2F</url>
    <content type="text"><![CDATA[&emsp;新事物往往不是凭空而来，发展和演化也很少一蹴而就。认识新事物，首先要弄清楚它的来龙去脉，知其出身，方能知其所以然。此文章为《区块链技术指南》的读后笔记&amp;摘要。 账本科技的演化&emsp;区块链（Blockchain）的概念首次被人们关注，源于2009年初上线的比特币（Bitcoin）开源项目。从记账科技的演化角度来看，区块链实际上是记账问题发展到分布式场景下的天然结果。账本科技的演化过程大致可以分为四个阶段：简单账本、复式账本、数字化账本、分布式账本。简单账本很好理解，就是数据没有备份，容易出错且很难发现是否被篡改过。复式账本,简单理解就是，将每笔交易分别在来源方和目标方进行记录，且多方之间的账本总额应该时刻保持相等，这样就解决了单个账本的账本可信问题。数字化账本的记账方法相对于复式账本本身并没有太多创新，但由于数字媒介的出现，使得账本的规模、处理的速度、账本的复杂度都有了天翻地覆的提升，这是现在的电子商务、互联网金融的技术基础。复式账本虽然记录了交易的来龙去脉，不易出错，但本质上仍然是中心化模式，多方交易情况下如果某个或部分账本数据出现不一致，对账十分困难，分布式账本：由交易多方共同维护同一个共享的分布式账本，打通交易在不同阶段的来龙去脉，同时凭借分布式技术进一步提高记账的规模、效率、可靠性以及合规性。但在分布式场景下，如何避免参与方恶意篡改或者破坏记录？该由谁来决定每笔交易记录是否写入到账本中？这些问题一直都还在探索最佳实践。 分布式账本与区块链&emsp;为了防止有参与者对交易记录进行篡改，需要引入一定的验证机制。很自然地，我们想到了数字摘要技术，一个多方参与且都有权限读写的账本，每次当有新的交易记录被追加到账本上时，参与各方可以使用Hash算法对完整的交易历史计算数字摘要，获取当前交易历史的“指纹”。此后任意时刻，每个参与方都可以对交易历史重新计算数字摘要，一旦发现指纹不匹配，则说明交易记录被篡改过。同时，通过追踪指纹改变位置，可以定位到被篡改的交易记录：&emsp;上述方案，在实际应用中可以解决记录防篡改问题，但仍然存在较大缺陷。由于每次追加新的交易记录时需要从头对所有的历史数据计算数字摘要，当已存在大量交易历史时，数字摘要计算成本将变得很高，随着新交易的放生交易耗费将越来越大，系统扩展性很差。为了解决可扩展性的问题，需要进一步改进为方案二：主要到每次摘要已经确保了从头开始到摘要位置的完整历史，当新的交易发生后，实际上需要进行额外验证的只是新的交易，即增量部分。因此，计算摘要的过程可以改进为对旧的摘要值再加上新的交易内容进行验证。这样既解决了防篡改问题，又解决了可扩展性问题：&emsp;实际上，你可能已经注意到，方案二的账本结构正是一个区块链结构：&emsp;可见，从分布式记账的基本问题出发，可以自然推导出区块链结构，这也说明了在分布式场景下的记账问题中，区块链是一个简洁有效的天然答案。当然，区块链结构也并非解决分布式记账问题的唯一答案，实际上，除了简单的线性队列结构，也有人提出采用树或者图结构。 比特币的意义和价值&emsp;直到今天，关于比特币的话题仍充满了不少争议。但大部分人应该都会认可，比特币是数字货币历史上，甚至整个金融历史上一次了不起的社会学实验。&emsp;比特币首次真正从实践意义上实现了安全可靠的非中心化数字货币机制，这也是它受到无数金融科技从业者热捧的根本原因。作为一种概念货币，比特币主要是希望解决已有货币系统面临的几个核心问题： 被掌控在单一机构手中，容易被攻击。 自身的价值无法保证，容易出现波动。 无法匿名化交易，不够隐私。&emsp;要实现一套数字货币机制，最关键的还是要建立一套完善的交易记录系统，以及形成一套合理的货币发行机制。这个交易记录系统要能准确、公正地记录发生过的每一笔交易，并且无法被恶意篡改。对比已有的银行系统，可以看出，现有的银行机制作为金融交易的第三方中介机构，有代价地提供了交易记录服务。如果参与交易的多方都完全相信银行的记录（数据库），就不存在信任问题。可是如果是更大范围（甚至跨多家银行）进行流通的货币呢？哪家银行的系统能提供完全可靠不中断的服务呢？唯一可能的方案是一套分布式账本。这个账本可以被所有用户自由访问，而且任何个体都无法对所记录的数据进行恶意篡改和控制。为了实现这样一个前所未有的账本系统，比特币网络巧妙地设计了区块链结构，提供了可靠、无法被篡改的数字货币账本功能。&emsp;比特币网络中，货币的发行是通过比特币协议来规定的。货币总量受到控制，发行速度随时间自动进行调整。既然总量一定，那么单个比特币的价值会随着越来越多的经济实体认可比特币而水涨船高。发行速度的自动调整则避免出现通胀或者滞涨的情况。&emsp;另一方面，也要冷静地看到，作为社会学实验，比特币已经获得了某种成功，特别是基于区块链技术，已经出现了许多颇有价值的商业场景和创新技术。但这绝不意味着比特币自身必然能够进入到未来的商业体系中。比特币自身价值的波动十分剧烈；同时由于账目公开可查，通过分析仍有较大概率追踪到实际使用者；另外，比特币系统在不少管理环节上仍然依赖中心化的机制。 更有价值的区块链技术&emsp;如果说比特币是影响力巨大的社会学实验，那么从比特币核心设计中提炼出来的区块链技术，则让大家看到了塑造更高效、更安全的未来商业网络的可能。&emsp;2014 年开始，比特币背后的区块链技术开始逐渐受到大家关注，并进一步引发了分布式记账本（Distributed Ledger）技术的革新浪潮。&emsp;实际上，人们很早就意识到，记账相关的技术，对于资产（包括有形资产和无形资产）的管理（包括所有权和流通）十分关键；而多中心化的分布式记账本技术，对于当前开放、多维的商业模式意义重大。区块链的思想和结构，正是实现这种分布式记账本系统的一种极具可行潜力的技术。&emsp;区块链技术现在已经从比特币项目脱颖而出，在包括金融、贸易、征信、物联网、共享经济等诸多领域崭露头角。现在，除非特别指出是“比特币区块链”，否则当人们提到“区块链技术”时，往往已与比特币没有什么必然联系了。&emsp;商业行为的典型过程为：交易多方通过协商确定商业合约，通过执行合约完成交易。区块链擅长的正是如何在多方之间达成合约，并确保合约的顺利执行。根据类别和应用场景不同，区块链所体现的特点和价值也不同。从技术角度，一般认为，区块链具有如下特点： 分布式容错性：分布式账本网络极其鲁棒，能够容忍部分节点的异常状态； 不可篡改性：共识提交后的数据会一直存在，不可被销毁或修改； 隐私保护性：密码学保证了数据隐私，即便数据泄露，也无法解析。 随之带来的业务特性将可能包括： 可信任性：区块链技术可以提供天然可信的分布式账本平台，不需要额外第三方中介机构参与； 降低成本：跟传统技术相比，区块链技术可能通过自动化合约执行带来更快的交易，同时降低维护成本； 增强安全：区块链技术将有利于安全、可靠的审计管理和账目清算，减少犯罪风险。 &emsp;区块链并非凭空诞生的新技术，更是多种技术演化到一定程度后的产物，因此，其商业应用场景也跟促生其出现的环境息息相关。对于基于数字方式的交易行为，区块链技术能潜在地降低交易成本、加快交易速度，同时能提高安全性。我认为，能否最终提高生产力，将是一项技术能否被实践接受的关键。 区块链的定义与原理讨论区块链的定义可以从狭义和广义两个层面来看待。&emsp;狭义上，区块链是一种以区块为基本单位的链式数据结构，区块中利用数字摘要对之前的交易历史进行校验，适合分布式记账场景下防篡改和可扩展性的需求。&emsp;广义上，区块链还指代基于区块链结构实现的分布式记账技术，包括分布式共识、隐私与安全保护、点对点通信技术、网络协议、智能合约等。&emsp;区块链的基本原理理解起来并不复杂。首先来看三个基本概念： 交易（Transaction）：一次对账本的操作，导致账本状态的一次改变，如添加一条转账记录； 区块（Block）：记录一段时间内发生的所有交易和状态结果等，是对当前账本状态的一次共识； 链（Chain）：由区块按照发生顺序串联而成，是整个账本状态变化的日志记录。 &emsp;如果把区块链系统作为一个状态机，则每次交易意味着一次状态改变；生成的区块，就是参与者对其中交易导致状态改变结果的共识。区块链的目标是实现一个分布的数据记录账本，这个账本只允许添加、不允许删除。账本底层的基本结构是一个线性的链表。链表由一个个“区块”串联组成（如下图所示），后继区块中记录前导区块的哈希（Hash）值。某个区块（以及块里的交易）是否合法，可通过计算哈希值的方式进行快速检验。网络中节点可以提议添加一个新的区块，但必须经过共识机制来对区块达成确认。 认识上的误区目前，区块链自身仍是一种相对年轻的技术，不少人对它的认识还存在一些不足。下面总结了在探讨区块链技术时候一些常见的误区： 区块链核心在于比特币？虽说区块链的基本思想出现在比特币设计中，但发展到今日，加密货币和区块链已经俨然成为了两个不太相关的阵营。前者侧重从金融角度发掘比特币等代币的实验性意义；后者则从技术层面探讨和研究分布式账本科技可能带来的商业价值，试图拓展到更多的场景。 区块链是一种数据库技术 虽然区块链也可以用来存储数据，但它要解决的核心问题是多方的互信协作问题。单纯从存储数据角度，区块链效率可能不高，一般也不推荐把大量原始数据直接放到区块链系统上。当然，现有区块链系统中大量使用了数据库技术。也有企业尝试将区块链技术引入到分布式数据库领域，解决非中心化的管理，如 BigchainDB。 Token 就是数字货币？ 早在区块链概念出现之前，Token（令牌）就大量应用在计算机系统中，作为带有某种权限的证明，它可以协助系统应用进行快速协作。因此，在区块链系统中使用 Token 可能在某些应用场景（如游戏积分）下提供管理便利。而数字货币则强调经济价值，跟其在系统中的原生功能无必然联系。 区块链是万能的，是颠覆性的？ 作为融合多项已有技术而出现的事物，区块链跟现有技术体系是一脉相承的。它在解决多方合作和可信处理上向前多走了一步，但并不意味着它解决了所有问题，更不会快速颠覆大量的商业模式。很长一段时间里，区块链最适用的场景仍需不断摸索，区块链也会跟已有系统共存使用。 区块链必然是非中心化的？非中心化的一定优于中心化设计？讨论技术的优劣必须要有场景前提，区块链也是如此。并不存在某种区块链技术能在任意场景下都优于其它方案，这也是为何目前公开链和联盟链在技术选型上存在较大差异。中心化设计具有设计简单，管理完善，性能可控的特点，但往往容错性能比较差；非中心化（多中心化）的设计可以提高容错性能，利用多方共识来降低篡改风险，但意味着设计较复杂，要付出性能代价。实际上，根据实际场景的需求，现有大部分区块链技术都介于绝对的中心化和绝对的非中心化之间，以取得不同指标上的平衡。例如公开链为了提高性能通过选择部分信任的节点来作为代表。]]></content>
  </entry>
  <entry>
    <title><![CDATA[Unix/Linux文件类型与权限管理]]></title>
    <url>%2F2019%2F01%2F27%2FUnix%3ALinux%E6%96%87%E4%BB%B6%E7%B1%BB%E5%9E%8B%E4%B8%8E%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86%2F</url>
    <content type="text"><![CDATA[&emsp;在小白与计算机的日常中，经常会碰到文件无（读、写、执行）权限，包括很多刚入门的程序员，也常常在别人的博客里会看到类似 777 XX.file```、```chmod u+x XX.file```、```chmod g-w XX.file```这些不明觉厉的命令，今天来帮还不清楚的童鞋科普一下，电脑中每个文件的权限 系统究竟是如何管理的，又如何修改文件的权限。 12### 看懂文件类型与权限等信息&amp;emsp;先不慌，打开终端，在任意非空目录下我们输入： ls -l1234567891011终端会输出该目录下所有文件的信息：![](https://user-gold-cdn.xitu.io/2019/1/23/16878e2679f7e8f8?w=1210&amp;h=174&amp;f=png&amp;s=49942)好，我们来对每一列是什么分别介绍：1. -r-xr-xr-x：文件类型及权限信息 我们会发现任意一个文件第一列都是一个由 - d l p s b c D r w x + @ 这些字符组成的字符串，这一串字符究竟是由哪几部分组成又分别代表什么呢？ * 第一位字符：文件类型信息，-代表这是一个常规文件--Regular file，d代表这是一个文件夹--Directory，l代表文件链接--Symbolic link，更多文件类型（p-Named pipe、s-Socket、b/c-Device file、D-Door）请参考[Unix file types]((https://en.wikipedia.org/wiki/Unix_file_types)) * 第2-10位，这九位字符每三个为一组，每组的三个字符分别代表读(r)、写(w)、执行(x)权限，三组分别代表不同所有者对该文件的权限，第一组：文件所有者的权限、第二组：这一组其他用户的权限、第三组：非本组用户的权限，总结如下图：![](https://user-gold-cdn.xitu.io/2019/1/23/16878dd01879f1d6?w=2142&amp;h=796&amp;f=png&amp;s=455829) * 在MacOS系统中，输入```ls -l``` 发现文件权限格式与Linux稍有不同，部分文件权限信息的末尾有”+“或”@“符号：![](https://user-gold-cdn.xitu.io/2019/1/23/16878df88b3644fa?w=1110&amp;h=266&amp;f=png&amp;s=70168)我们直接看官方说明：终端输入```man ls```，我们可以看到这一段说明： If the file or directory has extended attributes, the permissions field printed by the -l option is followed by a &apos;@&apos; character. Otherwise, if the file or directory has extended security information (such as an access control list), the permissions field printed by the -l option is followed by a &apos;+&apos; character. 那什么是“extended security”呢？其实就是扩展安全信息 执行ls -le查看extended security: ![](https://user-gold-cdn.xitu.io/2019/1/23/16879719bf49f408?w=1506&amp;h=380&amp;f=png&amp;s=91760) 你会发现权限末尾有&#39;+&#39;的都会有0: group:everyone deny delete`，意义就很明显啦~ 那什么又是“extended attributes”呢？继续查看“@”的含义，执行 ls -l@或xattr -l XX.file 查看扩展属性：简单理解@就是表示文件或目录有额外属性，比如在MacOS上 从网上下载个文件有时会提示“此文件来自网络下载不安全”，就是这个属性起的作用。而从MacOS下copy文件到Linux系统上时也会因为这个属性出现打不开的情况。可以手动去除掉：xattr -c XX.file。 其余每一列对应的信息如下：[类型+权限]—[连接]-[所有者]-[所属组]-[文件大小]-[最后修改日期]-[文件名称] 文件权限的修改：一张图看懂修改文件权限的命令：通过按位与的设计巧妙的用三个二进制位表示了三种权限产生的8种组合。用符号改变权限时，如：chmod a+r XX.file表示对用户、组、其他 全部添加读取权限。 以上，有任何疑问欢迎留言~]]></content>
  </entry>
  <entry>
    <title><![CDATA[撸一个 iOS 重签名脚本]]></title>
    <url>%2F2019%2F01%2F23%2F%E6%92%B8%E4%B8%80%E4%B8%AAiOS%E9%87%8D%E7%AD%BE%E5%90%8D%E8%84%9A%E6%9C%AC%2F</url>
    <content type="text"><![CDATA[上一篇iOS APP签名详解我们了解了iOS签名的机制和原理，这一篇我们一起来动手写一个自动重签名的脚本，懒是程序员乃至人类进步的终极力量，造轮子写工具可以极大的避免重复性工作，为我们节省更多的时间放在思考上，话不多说撸起袖子开始干： 第一步：获取脱壳的ipa包 从iTunes 12.6.3及以前的版本上直接下载 （macOS Mojave Doesn’t Support），这样获取到的是正版ipa，需要用Clutch、dumdecrypted等工具先脱壳，否则别人的加密验证不通过无法安装 各类助手上下载越狱版ipa包 越狱手机导出 Xcode打包 等等 这里我下载了微信的越狱版ipa包用来演示。 第二步：命令行实现重签名 将ipa解压缩后前往.app所在目录，输入 -d -vv WeChat.app``` 1234567891011121314151617181920212223 查看可执行文件的签名信息：![](https://user-gold-cdn.xitu.io/2019/1/22/1687194244bf3be8?w=1424&amp;h=376&amp;f=png&amp;s=245630)可以看到签名信息现在还是腾讯的 2. 输入： ```security find-identity -v -p codesigning``` 查看Mac本地的证书列表:![](https://user-gold-cdn.xitu.io/2019/1/22/16871950dcd0e283?w=1592&amp;h=272&amp;f=png&amp;s=114415) 记下你要用来签名的证书双引号（包括双引号）中的字符串，一会儿会用到 3. 确认ipa包是否已经脱壳，输入： ```cd WeChat.app``` ```otool -l WeChat | grep crypt``` 会输出：![](https://user-gold-cdn.xitu.io/2019/1/22/16871958f396421c?w=988&amp;h=244&amp;f=png&amp;s=94527) cryptid为0即为已脱壳，为1为加密状态。这里有两组数据是因为这是个支持两种CPU架构的可执行文件，可输入```file WeChat```查看可执行文件支持的架构：![](https://user-gold-cdn.xitu.io/2019/1/22/16871961777d44a5?w=1396&amp;h=142&amp;f=png&amp;s=108757)4. 删除无法签名的插件文件：PlugIns文件夹、Watch文件夹 5. 对.app文件夹内的Frameworks文件夹中的每一个framework强制重签名： ```codesign -fs 步骤2中记下的证书信息 要签名的.framework``` 注意不要遗漏，每一个framework都要用自己的证书重签一下6. 将自己的描述文件名改为embedded.mobileprovision，并拖入到.app中，再将.app中info.plist文件里的Bundle identifier改成我们自己的BundleID7. 在.app同级目录下新建一个entitlements.plist文件，查看描述文件内容： ```security cms -D -i embedded.mobileprovision```将Entitlements节点下的 ... ... 12345 复制粘贴到刚刚新建的entitlements.plist文件中8. 最后一步，对整个包签名，回到.app所在目录，输入： ```codesign -fs 步骤2中记下的证书信息 --no-strict --entitlements=entitlements.plist WeChat.app``` 签名成功！9. 打包：```zip -ry WeiChat.ipa Payload 以上，就是通过命令行一步步的实现应用重签名。 最后：撸自动重签名的脚本现在我就按照这个思路写脚本：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657#$&#123;SRCROOT&#125; 它是工程文件所在的目录TEMP_PATH=&quot;$&#123;SRCROOT&#125;/Temp&quot;#资源文件夹，我们提前在工程目录下新建一个APP文件夹，里面放ipa包ASSETS_PATH=&quot;$&#123;SRCROOT&#125;/APP&quot;#目标ipa包路径TARGET_IPA_PATH=&quot;$&#123;ASSETS_PATH&#125;/*.ipa&quot;#清空Temp文件夹rm -rf &quot;$&#123;SRCROOT&#125;/Temp&quot;mkdir -p &quot;$&#123;SRCROOT&#125;/Temp&quot;#----------------------------------------# 1. 解压IPA到Temp下unzip -oqq &quot;$TARGET_IPA_PATH&quot; -d &quot;$TEMP_PATH&quot;# 拿到解压的临时的APP的路径TEMP_APP_PATH=$(set -- &quot;$TEMP_PATH/Payload/&quot;*.app;echo &quot;$1&quot;)# echo &quot;路径是:$TEMP_APP_PATH&quot;#----------------------------------------# 2. 将解压出来的.app拷贝进入工程下# BUILT_PRODUCTS_DIR 工程生成的APP包的路径# TARGET_NAME target名称TARGET_APP_PATH=&quot;$BUILT_PRODUCTS_DIR/$TARGET_NAME.app&quot;echo &quot;app路径:$TARGET_APP_PATH&quot;rm -rf &quot;$TARGET_APP_PATH&quot;mkdir -p &quot;$TARGET_APP_PATH&quot;cp -rf &quot;$TEMP_APP_PATH/&quot; &quot;$TARGET_APP_PATH&quot;#----------------------------------------# 3. 删除extension和WatchAPP.个人证书没法签名Extentionrm -rf &quot;$TARGET_APP_PATH/PlugIns&quot;rm -rf &quot;$TARGET_APP_PATH/Watch&quot;#----------------------------------------# 4. 更新info.plist文件 CFBundleIdentifier# 设置:&quot;Set : KEY Value&quot; &quot;目标文件路径&quot;/usr/libexec/PlistBuddy -c &quot;Set :CFBundleIdentifier $PRODUCT_BUNDLE_IDENTIFIER&quot; &quot;$TARGET_APP_PATH/Info.plist&quot;#----------------------------------------# 5. 给MachO文件上执行权限# 拿到MachO文件的路径APP_BINARY=`plutil -convert xml1 -o - $TARGET_APP_PATH/Info.plist|grep -A1 Exec|tail -n1|cut -f2 -d\&gt;|cut -f1 -d\&lt;`#上可执行权限chmod +x &quot;$TARGET_APP_PATH/$APP_BINARY&quot;#----------------------------------------# 6. 重签名第三方 FrameWorksTARGET_APP_FRAMEWORKS_PATH=&quot;$TARGET_APP_PATH/Frameworks&quot;if [ -d &quot;$TARGET_APP_FRAMEWORKS_PATH&quot; ];thenfor FRAMEWORK in &quot;$TARGET_APP_FRAMEWORKS_PATH/&quot;*do#签名/usr/bin/codesign --force --sign &quot;$EXPANDED_CODE_SIGN_IDENTITY&quot; &quot;$FRAMEWORK&quot;donefi 将写好的脚本直接丢到.xcodeproj同级目录中 Xcode –&gt; Build Phases –&gt; New Run Script Phase: 现在，将你要重签名的ipa包丢到在工程目录下新建的文件夹APP中（这个文件夹跟你写的脚本中的目标文件夹同名即可），直接Run！任何应用都会在你的真机上跑起来了！这也是后面讲逆向的准备工作。 了解了iOS签名的原理再做重签名，我相信上面的每一步为什么那么做，你自然也很清楚了，写起脚本来自然思路也很清晰~如果你在实践中遇到任何问题，欢迎留言交流~]]></content>
  </entry>
  <entry>
    <title><![CDATA[iOS APP签名机制详解]]></title>
    <url>%2F2019%2F01%2F18%2FiOS%20APP%E7%AD%BE%E5%90%8D%E6%9C%BA%E5%88%B6%E8%AF%A6%E8%A7%A3%2F</url>
    <content type="text"><![CDATA[苹果的需求 为了保证系统的安全性，所有iPhone上安装的应用必须是经过苹果授权的 安装包不需要上传到App Store也能被安装 （开发调试 企业灰度） 防止证书权限滥用：设备限制、指定APP、iCloud/PUSH/后台运行等附加权限控制 苹果的解决方案：双层代码签名+描述文件: 这里画一张图附上： &emsp;在iOS出来之前，主流的操作系统（MacOS/Windows）软件随便从哪里下载都能运行，系统安全存在隐患，盗版软件、病毒入侵、静默安装等等，苹果希望解决类似的问题，保证在iPhone iOS上的APP都是经过苹果官方允许的，怎样保证呢？就是通过代码签名。 &emsp;如果要实现验证，最简单的方式就是苹果官方生成一对RSA公私钥，在iOS系统中内置一个公钥，私钥由苹果后台保存，我们上传APP到App Store时苹果后台用私钥对APP数据进行加密，iPhone下载APP后用公钥验证这个签名就可以确认APP是否经过允许或被三方篡改过。但是，我们安装APP并不仅仅只有App Store这一个方式，比如真机调试、企业包等，所以只靠这个简单的数字签名方式是不够的。 &emsp;于是苹果设计了双层签名的机制，我们都知道iOS的应用开发必须在Mac系统下进行，正是由于这个依赖关系，双层签名才有了基础： 在Mac系统中生成一对非对称加密算法的公私钥M（Xcode会帮你做好） 苹果自己有固定的一对公私钥，正如上述最简单的代码签名中提到的：私钥A在苹果后台，公钥A在每个iOS系统的手机中 把公钥M以及一些开发者信息（也就是CSR文件）发送给苹果后台，用苹果后台的私钥A对公钥M签名，得到一份包含公钥M以及其签名结果的数据就是证书（.p12）。 在开发时，当我们打包时会用本地的私钥M（也就是可导出给小伙伴的开发者证书）对这个APP进行签名，同时把第三步得到的证书一起打包进APP里，然后安装到手机上（真机联调）或者提交App Store审核 安装时，iOS系统取得内置公钥A去验证公钥M的数字签名证书是否正确 验证公钥M是苹果认证过的后，再用公钥M去验证APP的签名，这样就间接验证了这个APP的安装是经过苹果允许的了（注意这里只验证安装行为，不验证APP是否被改动，因为开发阶段APP内容总是不断变化的） &emsp;有了上面的过程已经可以保证开发者的认证和程序的安全了，但是如果只有上述的过程，那岂不是只要申请了一个证书就可以安装到所有的iOS设备了？所以，苹果又增加了授权文件（Provisioning profile）的验证，Provisioning profile一般包括三样东西：证书、APP ID、设备。 &emsp;描述文件是在AppleDevelop网站创建的(在Xcode中填上AppleID它会代办创建)，Xcode运行时会打包进入APP内。在开发时，编译完一个 APP 后，用本地的私钥M对这个APP进行签名，同时把从苹果服务器得到的 Provisioning Profile 文件打包进APP里，文件名为embedded.mobileprovision，当把APP安装到手机上时，iOS系统会进行验证。 &emsp;以上就是iOS应用签名的原理，下一篇基于这个原理我会手撸一个自动重签名的脚本。]]></content>
  </entry>
  <entry>
    <title><![CDATA[浅谈iOS中常用加密算法的使用]]></title>
    <url>%2F2019%2F01%2F12%2F%E6%B5%85%E8%B0%88iOS%E4%B8%AD%E5%B8%B8%E7%94%A8%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95%E7%9A%84%E4%BD%BF%E7%94%A8%2F</url>
    <content type="text"><![CDATA[&emsp;以前如果我们忘记了登录密码，通常可以通过“找回密码”这样的方式拿回密码，那说明你的隐私数据在他们的数据库中是明文保存的，现在请切记：如果哪个平台还有这样的方式请立刻马上注销你的账号，并避免在任何其他平台使用这个平台使用过的密码。请坚信：在网络世界中，只要是明文存在或可逆的东西，都是不安全的。没有哪家公司会告诉你他们的数据库被拖库过，你更无法想象现在的黑色产业早已让你毫无隐私。 &emsp;千万别一个密码走天下，一定要定期改密码！ &emsp;道高一尺魔高一丈，对用户隐私及一些敏感数据的保护越来越重要，在iOS中，苹果封装了Security.framework、CommonCrypto.framework这两个保护信息安全的库，为我们提供了安全相关的通用API： RSA：公私钥的生成、公钥加密、私钥解密、私钥签名、公钥验签功能，证书信息的读取，以及密钥在KeyChain中存储，查找，删除等功能 哈希：SHA1、SHA224、SHA256、SHA384、SHA512MD2、MD4、MD5 对称加密：DES、3DES、AES &emsp;这一篇文章，我们就以“用户输入密码，登录，服务端验证用户信息，用户上传隐私数据”这个常见场景为例，分享一些密码学常识和加密时常用的防破解技巧，至于上述算法相关API的使用，文末我会附上iOS中所有常用加密API使用的demo，这里就不浪费篇幅贴代码了。先说两个保护用户隐私的原则： 网络上不允许明文传递用户隐私信息 本地不允许明文保存用户隐私信息 &emsp;再了解下几种算法的特点： 对称加密 加密解密共用一个密钥 DES 数据加密标准，安全强度不够已经很少用了 3DES 使用三个密钥对相同的数据执行三次加密 强度略高，但密钥的保护一直是个隐患所以也不常用 AES 高级密码标准 用得最多 两种常用加密模式： ECB：&emsp;最基本的加密方式，无初始向量，相同的明文永远生成不变的密文，容易受到密码本重放攻击，很少用 CBC：&emsp;明文被加密前要与前面的密文进行异或运算后再加密，因此只要选择不同的初始向量，相同的密文加密后会形成不同的密文，这是目前应用最广泛的模式。CBC加密后的密文是上下文相关的，但明文的错误不会传递到后续分组，但如果一个分组丢失，后面的分组将全部作废(同步错误)。&emsp;可以有效的保证密文的完整性，如果一个数据块在传递是丢失或改变，后面的数据将无法正常解密。 RSA关于RSA相关知识请参考：非对称加密–RSA原理浅析RSA的主场-证书签名之OpenSSL演示 这里不再赘述。 哈希算法也就是常说的散列函数，严格意义上它并不是一种加密算法，但它常常与加密算法一起出现，作为一种组合方式。哈希具有以下特点： 算法是公开的 对相同的数据运算，得到的结果是一样的 同一算法对不同的数据运算，得到的结果长度是固定的，如MD5的结果一定是128bit，32个字符(16进制表示)，所以散列碰撞是必然的偶然 不可逆，但是可以通过彩虹表去反查询 通常作为信息“指纹”–信息摘要，用来做数据识别（版权、搜索引擎、数字签名等）。 实际应用&emsp;知道了每种算法的特点，回到应用场景：用户输完密码点击登录时，我们如何保证用户信息是足够安全的呢？ 对称加密：密钥传输有隐患，且在客户端加密前和服务端解密后会出现明文，不安全。 RSA：安全性高，网络劫持很难破解，但是服务端拿到客户端加密后的密文怎么办呢？用私钥解密，解密之后拿到明文信息？大忌，没有哪个服务端是安全的，更没法保证数据库人员的个人泄露用户信息。不可取。 哈希： 直接MD5？用户输入常规组合概率很大，暴力破解风险很高，不可取。本地加盐，很变态的盐？安全性有一定保障，缺点是盐写死在程序里了，写代码的人也有泄露的可能性，一旦泄漏结果是毁灭性的，不可取。 HMAC：Keyed-Hashing for Message Authentication，这是一种使用单向散列函数来构造消息认证码的方案，而不是算法。&emsp; 在第一次注册时，服务端下发一个随机密钥 n，这个密钥会在客户端和服务端都保存一份（支持服务端更新），客户端的 n 用作以后每次登录时的“盐”参与第一次散列运算，并将第一次散列运算的结果 s 发给服务端作为用户密码信息保存到数据库中，这样用户的真实密码无论是客户端还是服务端都不知道，也不存在数据库被拖库泄露的问题。服务端保存的 n 用于当用户换设备登录或卸载重新装时验证通过后再次将 n 下发给客户端保存。&emsp;用户每次登录时，服务器会再动态下发一个随机值作为密钥，并在会话中记下这个随机值 r，客户端先用本地保存的 n 对用户密码做散列运算得到 s ，再用 r 对 s 做一次MAC（Message Authentication Codes）运算并将运算结果发送给服务端，服务端也从数据库中取出用户的密码散列值做同样的运算，并将结果与客户端进行对比。为了防止网络中间人攻击，还需将时间戳（服务器时间，一般精确到分钟）参与校验，黑客就很难破解了。这是目前最主流的安全方案。 &emsp;现在用户登录成功，现在要上传一份敏感数据，我们如何保证数据的完整性呢？结合上面的分析，推荐AES的CBC加密方式，安全性高，还能保证完整性，数字签名同样也可以验证数据完整性，用RSA对数据的hash值进行加密，服务端接收完数据后，用私钥解密得到hash值，与接收数据的hash值作比对。 补充：iOS中常见加密算法的使用：EncryptDemo在Demo中，对称加密AES的加密解密函数： CCCryptorStatus CCCrypt( CCOperation op, /* kCCEncrypt, etc. */ CCAlgorithm alg, /* kCCAlgorithmAES128, etc. */ CCOptions options, /* kCCOptionPKCS7Padding, etc. */ const void *key, size_t keyLength, const void *iv, /* optional initialization vector */ const void *dataIn, /* optional per op and alg */ size_t dataInLength, void *dataOut, /* data RETURNED here */ size_t dataOutAvailable, size_t *dataOutMoved) API_AVAILABLE(macos(10.4), ios(2.0)); 调用CCCrypt时，用户敏感数据不要直接作为参数传递，否则逆向很容易hook到，通常的做法是对敏感数据做异或、加盐等处理，具体根据需要自己设计。 iOS app签名机制详解 推荐阅读：iOS应用签名(上)iOS应用签名(下) iOS中对钥匙串的操作推荐：SSKeyChain 实践出真知，下篇再会~老规矩，有错误请积极指正，有问题请踊跃留言。 更多一手好文更新，请关注我的个人微信公众号：面向未来编程]]></content>
  </entry>
  <entry>
    <title><![CDATA[RSA的主场-证书签名&OpenSSL演示]]></title>
    <url>%2F2019%2F01%2F09%2FRSA%E7%9A%84%E4%B8%BB%E5%9C%BA-%E8%AF%81%E4%B9%A6%E7%AD%BE%E5%90%8D%26OpenSSL%E6%BC%94%E7%A4%BA%2F</url>
    <content type="text"><![CDATA[&emsp;在上一篇非对称加密–RSA原理浅析中，我们了解了RSA加密的数学原理，RSA的安全性目前虽然得到公认，但它同样也有缺点：加密速度慢、性能较低，不适合对大文件直接做加密，需要加密的原始数据通常会先经过Base64、Hash、对称加密等处理后，再用RSA对其进行加密，因此RSA最主要的应用场景，是数字签名–对数据做身份/合法性校验。&emsp;权威的证书颁发机构–躺着赚钱的CA，就是用的RSA这一套算法，这一篇我们一起用命令行来逐步拆解证书的生成过程，揭开证书背后的秘密。Talk is cheap，show you the code，Come on！ 什么是OpenSSL&emsp;SSL大家都不陌生，我们访问网站的时候，以HTTPS开头的表示你和服务器之间传输的数据经过了加密，这里所使用的加密协议就是SSL（Secure Sockets Layer，后来又推出了它的后续版本，改名叫TLS）。也就是说，把HTTP协议经过一层SSL协议进行加密包装，就变成了HTTPS。当然，SSL/TLS还用在很多协议中，例如VPN、加密的电子邮件协议等。&emsp;那OpenSSL是啥？在SSL协议中，我们使用了很多密码学手段来保护数据，其中包括对称密码、公钥密码、数字签名、证书、完整性校验、伪随机数生成等。由于这些算法和操作都非常复杂，于是开源社区就开发了一套库，这个库里面提供了很多现成的标准方法，其他开发者只要用正确调用这些方法，就可以实现SSL协议中的各种加密/解密操作了。因此，OpenSSL是一套开源的密码学工具包（open source cryptography toolkit）。情理之中的，OpenSSL也支持了RSA算法，接下来我们就用OpenSSL在macOS的终端上为大家演示证书签名的每一个步骤。 RSA加密、证书生成终端演示&emsp;为了便于观察，请开辟并前往一个空文件夹下开始你的表演~输入：12345openssl genrsa -out private.pem 2048``` 此时目录中出现一个private.pem文件，这个文件包含了私钥信息 根据私钥生成公钥 输入： openssl rsa -in private.pem -pubout -out public.pem1分别查看文件中的内容： cat private.pem1234```cat public.pem``` 你会得到这样类似这样的结果： —–BEGIN RSA PRIVATE KEY—–Base64编码的内容—–END RSA PRIVATE KEY—–123456```-----BEGIN PUBLIC KEY-----Base64编码的内容-----END PUBLIC KEY-----``` 现在我们随便写一个txt文件作为要加密的数据： echo “hello word!“ &gt; message.txt1用公钥对其加密： openssl rsautl -encrypt -in message.txt -inkey public.pem -pubin -out enc.txt12查看加密后的文件：```cat enc.txt```，你只能看到一堆乱码 用私钥对加密文件解密： openssl rsautl -decrypt -in enc.txt -inkey private.pem -out dec.txt123查看解密结果：```cat dec.txt```，与你的message.txt内容完美吻合~ 上面的过程反过来（私钥加密 公钥解密）一个道理，但执行命令有点区别： 用私钥对其加密： openssl rsautl -sign -in message.txt -inkey private.pem -out enc.bat1用公钥对加密文件解密： openssl rsautl -verify -in enc.bat -inkey public.pem -pubin -out dec.txt1&amp;emsp;至此，我们已经完成了RSA加密解密的操作，那我们开发中用的证书跟它们有什么关系呢？做iOS开发的都用钥匙串从CA请求过csr文件，其实就是根据当前Mac内置的私钥（当然你也可以自己指定私钥）生成对应的公钥，生成的csr文件包含了公钥证书原始文件+你的服务器信息和单位等信息。我们来用命令执行这一步操作： openssl req -new -key private.pem -out rsacert.csr1根据提示依次输入下列信息并回车: Country Name (2 letter code) []:State or Province Name (full name) []:Locality Name (eg, city) []:Organization Name (eg, company) []:Organizational Unit Name (eg, section) []:Common Name (eg, fully qualified host name) []:Email Address []:A challenge password []:1拿到带着公钥信息的csr文件之后，下一步就是交给CA认证中心进行签名，也就是让CA盖个章（一个章一年五千大洋@_@，如果你的https用自签的证书那别人访问时有不安全提示就是因为你没有CA盖的这个章，不被承认是安全的）： openssl x509 -req -days 3650 -in rsacert.csr -signkey private.pem -out rsacert.crt1这时得到的crt文件是Base64编码的，我们需要转成DER二进制格式的证书才能直接使用： openssl x509 -outform der -in rsacert.crt -out rsacert.der123这个rsacert.der文件就是包含了我们公钥信息的证书！ ![](https://user-gold-cdn.xitu.io/2019/1/9/16832dfe1997dfd0?w=1022&amp;h=826&amp;f=png&amp;s=172453)最后一步，导出公钥证书对应的私钥证书： openssl pkcs12 -export -out p.p12 -inkey private.pem -in rsacert.crt12345![](https://user-gold-cdn.xitu.io/2019/1/9/16832e25c325de5f?w=1004&amp;h=816&amp;f=png&amp;s=165762)输入两次私钥证书的密码就得到了我们最熟悉的.p12文件。 &amp;emsp;当然，在我们实际开发中不会同时拿到这两个证书，这里只是给大家演示它们之间的关系，后面我会对苹果的双向验证(双层签名)原理专门写一篇文章讲解 ### 补充&amp;emsp;关于.pem文件内部的数据结构可以通过命令 openssl rsa -in private.pem -text -out ptivate.txt`查看，ptivate.txt文件中每一项的具体意义请参考（PEM格式）解析&emsp;在上面的命令中如果有些不明觉厉的玩意儿，那多半是你对证书相关的文件编码格式、协议和扩展名不太熟悉，不要慌，我已经为你准备好了加餐。 高能预警——证书文件编码格式、扩展名、协议科普&emsp;我们统一采用X.509的格式标准生成证书，接触过证书的同学看到：pem、der、pfx、jks、kdb、cer、key、csr、crt、crl、ocsp、scep等这些字眼一定不会完全陌生，这些东东究竟是个啥？赶紧来一探究竟，有描述不准确的地方还望指正： 编码格式 DER：（Distinguished Encoding Rules）的缩写，它是大多数浏览器的缺省格式，并按 ASN1 DER 格式存储，它是无报头的。可包含所有私钥、公钥和证书。 PEM：（Privacy Enhanced Mail）的缩写，它是OpenSSL默认采用的信息存放方式，它存储用Base64编码的DER格式数据，用ASCII报头包围，因此适合系统之间的文本模式传输。可以包括所有私钥、公钥和证书。 文件扩展名 .pem - (隐私增强型电子邮件) DER编码的证书再进行Base64编码的数据存放在”—–BEGIN CERTIFICATE—–”和”—–END CERTIFICATE—–”之中 .cer, .crt, .der - 通常是DER二进制格式的证书，但Base64编码后也很常见 .p7b, .p7c - PKCS#7 SignedData structure without data, just certificate(s) or CRL(s)，加密消息语法(pkcs7),是各种消息存放的格式标准。这些消息包括:数据、签名数据、数字信封、签名数字信封、摘要数据和加密数据。 .p12 - PKCS#12格式，包含证书的同时可能还有带密码保护的私钥 .pfx - PFX，PKCS#12之前的格式（通常用PKCS#12格式，比如那些由IIS产生的PFX文件） .jks - 通常可以将Apache/OpenSSL使用的“.key文件 + .crt文件”格式转换为标准的Java Key Store(JKS)文件。JKS文件格式被广泛的应用在基于JAVA的WEB服务器、应用服务器、中间件。你可以将JKS文件导入到TOMCAT、WEBLOGIC 等软件 .kdb - 通常可以将Apache/OpenSSL使用的“.key文件 + .crt文件”格式转换为标准的IBM KDB文件。KDB文件格式被广泛的应用在IBM的WEB服务器、应用服务器、中间件。你可以将KDB文件导入到IBM HTTP Server、IBM Websphere 等软件 .csr - 证书请求文件(Certificate Signing Request)。生成X509数字证书前,一般先由用户提交证书申请文件,然后由 CA 来签发证书。 .key - 一般指PEM格式的私钥文件，也可能是DER格式的 .crl - 证书吊销列表 (Certification Revocation List)是一种包含撤销的证书列表的签名数据结构。CRL是证书撤销状态的公布形式,CRL 就像信用卡的黑名单,用于公布某些数字证书不再有效。CRL是一种离线的证书状态信息。它以一定的周期进行更新。CRL可以分为完全CRL和增量CRL。在完全CRL中包含了所有的被撤销证书信息,增量CRL由一系列的CRL来表明被撤销的证书信息,它每次发布的CRL是对前面发布CRL的增量扩充。基本的CRL信息有:被撤销证书序列号、撤销时间、撤销原因、签名者以及 CRL 签名等信息。基于CRL的验证是一种不严格的证书认证。CRL能证明在CRL中被撤销的证书是无效的。但是,它不能给出不在CRL中的证书的状态。如果执行严格的认证,需要采用在线方式进行认证,即OCSP认证。一般是由CA签名的一组电子文档，包括了被废除证书的唯一标识（证书序列号），CRL用来列出已经过期或废除的数字证书。它每隔一段时间就会更新，因此必须定期下载该清单，才会取得最新信息 协议 OCSP – 在线证书状态协议(Online Certificate Status Protocol,rfc2560)，用于实时表明证书状态。OCSP 客户端通过查询 OCSP 服务来确定一个证书的状态,可以提供给使用者一个或多个数字证书的有效性资料，它建立一个可实时响应的机制，让用户可以实时确认每一张证书的有效性，解决由CRL引发的安全问题。。OCSP 可以通过 HTTP协议来实现。rfc2560 定义了 OCSP 客户端和服务端的消息格式 SCEP － 简单证书注册协议（Simple Certificate Enrollment Protocol），基于文件的证书登记方式需要从您的本地计算机将文本文件复制和粘贴到证书发布中心，和从证书发布中心复制和粘贴到您的本地计算机。SCEP可以自动处理这个过程但是CRLs仍然需要手动的在本地计算机和CA发布中心之间进行复制和粘贴 实践出真知，下篇再会~ 老规矩，有问题请踊跃留言。更多一手好文更新请关注我的个人微信公众号：面向未来编程]]></content>
  </entry>
  <entry>
    <title><![CDATA[非对称加密--RSA原理浅析]]></title>
    <url>%2F2019%2F01%2F07%2F%E9%9D%9E%E5%AF%B9%E7%A7%B0%E5%8A%A0%E5%AF%86--RSA%E5%8E%9F%E7%90%86%E6%B5%85%E6%9E%90%2F</url>
    <content type="text"><![CDATA[来龙去脉&emsp;在1976年以前，所有的加密方法都是同一种模式：加密、解密使用同一种算法。在交互数据的时候，彼此通信的双方就必须将规则告诉对方，否则没法解密。这种加密与解密使用同一规则的加密方式被称为对称加密算法。那么加密和解密的规则（简称密钥）的保护就显得尤其重要，传递密钥的风险也一直是个隐患。&emsp;直到1976年，两位美国计算机学家：迪菲（W.Diffie）、赫尔曼（M.Hellman）提出了一种崭新构思，可以在不直接传递密钥的情况下完成密钥交换，开创了密码学研究的新方向。这就是“迪菲赫尔曼密钥交换”算法，其仍然是一种对称加密算法，只是密钥不再需要传递。交换原理如下图所示：其中a，b是在通信两端本地的随机数，g是模p的一个原根，K是交换后产生的密钥，安全性来源于当p非常大时，已知g，p，A，B很难反算出a，b。离散对数问题是该算法的基础。&emsp;1977年，三位麻省理工学院的数学家 罗纳德·李维斯特（Ron Rivest）、阿迪·萨莫尔（Adi Shamir）和伦纳德·阿德曼（Leonard Adleman）一起设计了一种算法，可以实现非对称加密。这就是用他们三个人的名字命名的算法–RSA算法。&emsp;要弄清楚RSA的加密原理，先要知道欧拉定理)： 对于两个互质的正整数m、n，m^φ(n) mod n ≡ 1当m&lt;n时不难推导出：m^(k*φ(n)) mod n ≡ 1进一步得到：m^(k*φ(n)+1) mod n ≡ m 基于此还需要理解一个概念，模反元素： 如果两个正整数e和x互质，那么一定可以找到整数d，使得 e*d-1 被x整除。那么d就是e对于x的“模反元素”即ed mod x ≡ 1等同于 e\d ≡ k*x + 1，k为正整数 敲黑板！！！关键来了，上面两个转换的结果一碰撞，Duang！就碰出了我们RSA的核心算法： 当e与φ(n)互质时，m^(e*d) mod n ≡ m 鸡不鸡冻，开不开森！还有点迷糊？没关系，来继续： 假设我们对m进行加密传输加密：m^e mod n = c，解密：c^d mod n = m^(e*d) mod n = m 上述过程中，n+e就是RSA中的公钥，n+d就是RSA中的私钥，c是加密后的密文。 补充： n会非常大，长度一般为1024个二进制位，现在稳妥一点的长度为2048个二进制位。（目前人类已经分解的最大整数，232个十进制位，768个二进制位） 因为需要求出φ(n)，所以根据欧拉函数特点，最简单得到n的方式是由两个质数相乘: 质数：p1、p2Φ(n) = (p1 - 1) * (p2 - 1) 最终由φ(n)得到 e 和 d 总共生成6个数字：p1、p2、n、φ(n)、e、d 关于RSA的安全：除了公钥用到了n和e 其余的4个数字是不公开的。目前破解RSA得到私钥d的思路如下： 由于e*d = φ(n)*k + 1。e是公开的，那必须要知道φ(n) 要得到φ(n)，必须知道p1 和 p2 由于 n = p1 * p2，所以只有将n因数分解才能算出p1 p2 量子计算机如果成功诞生，现在通行于银行及网络等处的RSA加密算法可以破解，也会瓦解所有基于大质数因式分解算力逆天而衍生出的加密算法。 后续会对iOS证书签名相关原理进行分析，同时把常见的加密算法做一下梳理和比较，并附上每种算法在iOS中的代码实现。欢迎一起交流学习心得~]]></content>
  </entry>
  <entry>
    <title><![CDATA[如何成为有效学习的高手]]></title>
    <url>%2F2019%2F01%2F05%2F%E5%A6%82%E4%BD%95%E6%88%90%E4%B8%BA%E6%9C%89%E6%95%88%E5%AD%A6%E4%B9%A0%E7%9A%84%E9%AB%98%E6%89%8B%2F</url>
    <content type="text"><![CDATA[不闲言赘语，直戳痛点，放下借口，共同面对内心的忐忑吧。 注：本文为得到专栏付费课程学习心得，分享给大家一起加快成长速度。 &emsp;高效学习，它没有一种准确的定义，它更是对一种学习状态的描述，一万小时理论我们都听过，但这个理论可能不适合我们99.9%的人，我想这个理论出现的目的其实是为了推翻人们对于天才的迷信，但是，一万小时理论所展现的那种学习或者说练习的场景跟你和我的生活、工作离得都很远，我们也不需要都成为世界级的高手。这个理论本身没有错，它在打破人们对于天才的迷信的同时，也打击了绝大部分成年人的信心：谁有功夫每天8小时练习，练10年呢？但我们常常需要在很短的时间里要掌握一些技能，而且要达到专业级别的水准，这要求我们必须在有限的业余碎片时间中，高效的有目的的学习，话不多说，进入正题。 让我们从七个关键词着手： 适合自己 学习手法 短时间 注意力 解决难题 设定目标 名师 接下来我会对这七个关键词主义展开来探讨，学习如何将他们有机的结合起来，形成一套可自控，可循环，甚至是可以升级的学习套路。此篇先消化前两个关键词。 1.找到适合你的学习方法&emsp; 先重点要给大家介绍的两种学习思维，自然主义和结构主义。自然主义是模仿式的学习，自然主义注重文本的本身，什么是文本？就是一门知识或者技能它表面上看起来的样子，遇到什么就学什么，积少成多，以量取胜。学完了就那样了，它就是你自己的了，你就可以去运用了。结构主义它侧重对结构和交互关系的一个认识，它提倡透过表面的现象去寻求底层的关系。也就是说你要学习的是一套能举一反三的系统，这种诉求为的是什么呢？体系化的去学习，学会之后的目的，一定是为了创造，是一种质变，它要的是一种质变。选对学习方式这是第一步。（学习比如像语言、乐器、书法这些东西，你可能要用自然主义的学习方法去学习才更有效果。如果你学比如像医药、艺术，或者经济学，那就应该用结构主义的方式来学了。） &emsp; 再谈谈学习速度和效率的提升，理论上可以分为两个阶段：第一是避免无效学习，也就是选对学习方式。然后就是尽可能通过更好的学习策略来把这个有效变为高效。最简单有效的技巧就是 ： &emsp; 把你的目标要拆碎，针对那些细节进行反复的练习。不要一开始就照顾全局。 如果还能以碎片化的方式挤出更多的时间来学习的话，那效果会更好。 碎片化学习的真相&emsp; 碎片化学习的真相是碎片化学习一定要基于搜索，搜索是什么意思？意思就是你要带着困惑和问题去执行碎片化的学习，最终的效果一定是要把这些碎片给链接起来。在一段时间内，你的头脑当中应该始终有一个课题，这些碎片它不是满地的落叶，而是我们可以把它比喻成一个打碎的瓷器所产生的碎片。你要有目的的去拾获这些碎片，而不是乱捡。就算碎片化知识是树叶，你也得先有树根、树干和树枝。碎片化学习要的是枝繁叶茂，而不是捡几片树叶回来夹在书里边。那就属于一种情绪化的行为。 &emsp; 话说回来，碎片化学习它终究是有局限性的，因为它缺乏思考，缺乏辩论，缺乏与人交流的这些环节。所谓学而不思则罔嘛。碎片划拉的越多，可能越糊涂了。但是，无论如何，碎片化学习作为一种成年人学习的补充手段，无疑它是有很大力量的。 &emsp; 我必须还要提醒你一件事情！！！有一种假的碎片化学习叫做收藏。你一定对这个东西非常熟悉，收藏这个按钮是非常常见的，在很多app和软件当中，所谓一种人性化的设置。它的存在能够非常大程度缓解人们的焦虑。但这种缓解它其实不是真正的缓解，它只是给你造成一种幻觉，就是收藏了这些知识就是你的了。但其实，如果你收藏完了不看的话，你不去碰它，它并不是你的。你必须要破除掉这种幻觉。 2.不谈兴趣，用任务驱动学习&emsp; 学习，很多人提倡培养兴趣，让自己爱上学习，通常这些人最后都放弃了。以至于慢慢的习惯了没兴趣所以学不会、学不好的自我认知。学不会：连门都没入，这可能确实跟天赋有关，你让身高一米五的去打NBA这种情况我们就不讨论了；学不好：没达到某种专业的程度。兴趣无疑是最好的老师，这句话没毛病，但是如果明明没兴趣的东西，非要让你喜欢上它，这显然是极小概率事件，生活没时间给你去玩小概率。 &emsp; 一个很浅显的道理，人做任何事都是要回报的，所以一个人能带着多大的痛苦去做一件事，那是因为做成了这事儿会收获更大的利益。人做事的驱动有两个方面，一个是内部驱动，兴趣就是最大的内部驱动；一个是外部驱动，也就是完成目标之后收获的利益，既然你对该做的事没兴趣，那就干脆别浪费心思培养兴趣了，我要说的是，成年人学习不需要培养兴趣，应该用任务来驱动。你可能仍然会说，我没有任务啊，我找不到任务啊。任务到处都是，生活中的任务驱动，职场中的职业强迫，以教为学这些都是任务，找不到任务的唯一可能是你对未来的自己缺少预期。 &emsp; 生活中的驱动，比如厨艺、摄影、英语，现在的食品安全现状你还打算吃多久的外卖？想记录属于自己的美好记忆总觉得拍的照片经不起回味？出国游、面对各种英文文档没有翻译工具寸步难行？职场中的驱动，比如领域专业度、语言表达力、情绪与财富管理，部门每年加薪名额就那么点凭什么让老板优先考虑你呢？经常词不达意引起误会甚至错失良机？任性买买买快三十了还没房没车？以教为学，无论你学了什么，一旦你可以教别人了，你就不再是无业了。而且你还不是给人打工，你是自由职业者。以教为学一方面可以是自己对自己设置的一个任务和目标，不断地督促自己，另一方面其实会让你学的更好更透彻。 &emsp; 补充一点：你在心态上要有一种自觉，自己来聘请自己，让自我预期的小目标不断指引着持续学习，无论你在生活还是工作当中做任何事情都要这样做，不要心血来潮一股猛劲儿三分钟就疲了。 愿你有所收获 ( ゜- ゜)つロ乾杯🍻]]></content>
  </entry>
</search>
