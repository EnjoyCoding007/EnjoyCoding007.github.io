<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[《iOS 视觉专题》]]></title>
    <url>%2F2019%2F04%2F22%2F%E3%80%8AiOS%20%E8%A7%86%E8%A7%89%E4%B8%93%E9%A2%98%E3%80%8B%2F</url>
    <content type="text"><![CDATA[前情提要&emsp; 《权力的游戏》第八季已经开播了，作为最受观众喜爱的美剧之一，它大尺度的画面、充满悬念的剧情总是能轻易的俘获你的注意力。 &emsp; “There are a thousand Hamlets in a thousand people’s eyes.” &emsp; 追同样的剧，但每个人被吸引的点却千差万别。裸露的肉体，血腥的杀戮，钱权的争夺……它吸引我的，远不止是这些画面与剧情，而是它能将人性的险恶与光辉都刻画的淋漓尽致。&emsp; 该剧中充满了违背道德与伦理的人设，他们或出于最原始的求生欲，做出不惜一切手段保全自我的选择，或出于对正义与誓言的坚持，无悔的将自己的生命交给历史的巨轮碾压。关于那些选择的对错与否，与我们而言意义并不大。&emsp; 很多时候，我们都已经习惯了用“正派”与“反派”来划分他们。如果你能细细品味他们的人生境遇，以及每个人在各种境遇下的状态和心理历程，再看他们的选择和对环境的判断，很可能会改变你对一个角色的认知，你对人性的理解也会深刻不少。于我来看，其实他们都无绝对的好与坏，这取决于你评判的出发点是某个当事人，还是某个家族的命运，亦或是某个部落的存亡，甚至是全人类的发展……详细的思辨这里就不展开了。 &emsp; 咳咳…扯远了，言归正传，今天起新增一个专题：《iOS 视觉》。此前我们一直在围绕着 “iOS 逆向”这个专题在展开，最近出于工作&amp;未来的需要，要着手从0学习 iOS 视觉相关的知识了。当然，逆向相关的更新也会持续。 目录一览&emsp; 为了你有一个系统清晰的整体感，也为有一个统一便捷的入口，我会持续的在此篇更新《iOS 视觉》学习心得的链接至以下目录： 一：OpenGL 概述 OpenGL 是什么：来自 LearnOpenGL教程 的中文翻译系列，推荐给你。 … 二：着色器基础 着色器 … 三：…此目录会随着学习进度实时更新，推荐两本书：OpenGL ES 3.0编程指南、OpenGL编程指南 有始有终&emsp; 可能很多同学看到 OpenGL 会有一丝担忧：苹果不是从 iOS 12 开始已经正式弃用 OpenGL 了吗，现在学 OpenGL 会不会没有直接学苹果自己的 Metal 收益高呢？我觉得完全没有必要。且在《iOS 视觉专题》的学习计划中，也会覆盖到 Metal 框架，但会在 OpenGL 知识学习之后。&emsp; 在学习新知识时并不是“开头难”，难得是如何持续、系统的学成一门新知识。这也是我决定开这个专题的出发点，也希望能帮助更多的人更好的掌握这个技能。&emsp; 友情提示：该领域需要极大的精力投入才能有产出，所以如果你暂时用不到相关知识且没有长期做这块的打算，不建议浪费时间在这里。&emsp; 如果你也有学习这方面的打算，或者已经在研究该领域，欢迎后续多多交流学习心得~]]></content>
  </entry>
  <entry>
    <title><![CDATA[iOS 逆向之 Cycript 高级玩法（非越狱） & .cy文件的封装]]></title>
    <url>%2F2019%2F04%2F14%2FiOS%20%E9%80%86%E5%90%91%E4%B9%8B%20Cycript%20%E9%AB%98%E7%BA%A7%E7%8E%A9%E6%B3%95%EF%BC%88%E9%9D%9E%E8%B6%8A%E7%8B%B1%EF%BC%89%20%26%20.cy%E6%96%87%E4%BB%B6%E7%9A%84%E5%B0%81%E8%A3%85%2F</url>
    <content type="text"><![CDATA[What is Cycript摘自官方文档：&emsp; Cycript is a hybrid of ECMAScript some-6, Objective-C++, and Java. It is implemented as a Cycript-to-JavaScript compiler and uses (unmodified) JavaScriptCore for its virtual machine. It concentrates on providing “fluent FFI” with other languages by adopting aspects of their syntax and semantics as opposed to treating the other language as a second-class citizen. &emsp; The primary users of Cycript are currently people who do reverse engineering work on iOS. Cycript features a highly interactive console that features live syntax highlighting and grammar-assisted tab completion, and can even be injected into a running process (similar to a debugger) using Cydia Substrate. This makes it an ideal tool for “spelunking”. &emsp; However, Cycript was specifically designed as a programming environment and maintains very little (if any) “baggage” for this use case. Many modules from node.js can be loaded into Cycript, while it also has direct access to libraries written for Objective-C and Java. It thereby works extremely well as a scripting language. 简言之：&emsp; Cycript 是由 Cydia 创始人 Saurik 推出的一款脚本语言，它混合了 ECMAScript 6.0（简称ES6，是JavaScript 语言的下一代标准）、Objective-C ++ 和 Java 的语法解释器。这意味着我们能够在一个命令中使用 OC 或者 JavaScript，甚至两者并用。Cycript 目前的主要用途是在 iOS 上进行逆向工作，使用 Cydia Substrate 可以注入正在运行的进程（类似于调试器），这使它成为“探险”的理想工具。 How to use1. 安装&emsp; 在这里下载 SDK到本地，为了方便每次直接可以使用，建议将可执行文件 cycript 的路径配置到环境变量中（在 .bash_profile/.zshrc [取决于你用哪个终端] 中 export 一下），打开终端，执行 cycript 命令： 如上图所示，cy# 提示符表示进入了 JavaScript 控制台。你键入的所有内容都将由 JavaScriptCore 运行，这是 Apple 对 Safari 使用的 JavaScript 语言的实现。且在你键入时，你的命令将使用 Cycript 的词法分析器进行语法突出显，如果出现语法错误，则会出现提示。你可以使用 ctrl+C 取消键入，或 ctrl+D 退出该环境。 2. 使用预热准备&emsp; 关于 Cycript 的用法，这一篇只围绕 iOS 逆向工程来展开讲述，这也是 Cycript 目前用的最广的领域。对比上一篇提到的 LLDB ，Cycript 的亮点在于它可以动态注入，在运行时可以随时获取、修改程序中对象的值。而 LLDB 不管是在正向开发还是逆向工程中，它只能进行断点静态调试分析，效率相比 Cycript 有明显的不足。 &emsp; 用 Cycript 实现动态调试应用的前提，是你的应用为其开好了一个可连接的端口，鉴于越狱机并不是人人都有，此篇我主要为大家介绍非越狱环境下如何使用 Cycript 进行调试，让大家都有实操的条件。在开始使用 Cycript 之前，我们还需要准备另一个工具。 &emsp; 在过去两个多月的系列文章中，我将 iOS 的应用签名原理、自动重签名脚本以及代码注入等知识串讲了一遍，其实这些工作全都有工具帮我们集成好了，相信你也猜到了，没错，这个工具就是 MonkeyDev —- 原有 iOSOpenDev 的升级，非越狱插件开发集成神器！关于 MonkeyDev 的安装 这里就不展开赘述了，安装成功后，新建一个 MonkeyApp 项目 （MonkeyDevDemo）： 打开 MonkeyDevDemo，只需将你要调试的 ipa/app （脱壳还是必要的） 丢到新建项目的这个目录下： 运行项目，就可以将应用直接运行到你的真机上了： 上图中，红框标注出的 CYListenServer(6666); 正是我们前面提到的，用 Cycript 实现动态调试应用的前提：一个可远程连接的端口号–6666，在控制台中同样可以找到打印日志： 我相信你一定注意到了日志中的这一行： Download cycript(https://cydia.saurik.com/api/latest/3) then run: ./cycript -r 192.168.199.236:6666 &emsp; 没错，它就是在告诉你，server 端口绑定成功，终端执行 ./cycript -r 192.168.199.236:6666 就能连接到运行中的应用了。192.168.199.236 是我当前手机的 ip 地址。&emsp; 其实现原理，简单来讲，就是 hook 了 AppDelegate 里的 application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *) 方法，在该方法里开启 Cycript 并绑定到6666端口。 简单使用在上一篇 LLDB 中推荐的插件 chisel 里，很多好用的命令在 MonkeyDev 中也都做了支持： 123456789101112131415NSString* pvc(void);NSString* pviews(void);NSString* pactions(vm_address_t address);NSString* pblock(vm_address_t address);NSString* methods(const char * classname);NSString* ivars(vm_address_t address);NSString* choose(const char* classname);NSString* vmmap(); 赶快来试试手：找到淘宝首页底部 “淘” 按钮并将其隐藏掉： 是不是突然想拿微信发个 ￥0.01 的红包，然后用新学的这招操作一波：emmmmmm…友情提示，登录破解的微信应用，大概率会被微信封号的，别问我怎么知道的 (&gt;_&lt;) &emsp; 言归正传，上面列出的几个命令，基本可以满足你快速摸清一个 app 各个复杂页面的结构，同时也可以精准的定位并修改目标视图的UI。有的同学如果没接触过 Cycript ，建议先看一下 官方文档，熟悉下支持的语法和数据结构，多找几个小case有目的的练习，很快就能上手玩了，这对于想通过学习大厂优秀 app 的设计与实现思路的同学来说，是个不可错过的好途径。 123Tips： 1. 进入了 cy# JavaScript 控制台之后，相当于处在一个进程中，因此定义的变量在进程生命周期中一直可用。2. #0x10c144d00 ：#+对象地址=拿到该对象 高级玩法&emsp; 与 加强版 LLDB —— 修改 .lldbinit 文件 &amp; 插件安装 类似，Cycript 支持加载自定义脚本，这极大的提高了它的调试效率，在前面简单使用中列出的可用快捷命令可不是 Cycript 本来就有的，而是 MonkeyDev 的作者加载了自己写的网络脚本才支持的：我们可以打开该地址查看对应的.cy文件源码。 然后呢？然后我们也可以自己搞一份自己调试时常用的脚本，这里推荐一个小码哥写的 mjcript 。 加载.cy脚本的方式也为你准备好了：通过MonkeyDev加载网络或者自己的cy脚本。 来感受一波自定义脚本的效率： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225(function(exports) &#123; var invalidParamStr = &apos;Invalid parameter&apos;; var missingParamStr = &apos;Missing parameter&apos;; // app id CJAppId = [NSBundle mainBundle].bundleIdentifier; // mainBundlePath CJAppPath = [NSBundle mainBundle].bundlePath; // document path CJDocPath = NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES)[0]; // caches path CJCachesPath = NSSearchPathForDirectoriesInDomains(NSCachesDirectory, NSUserDomainMask, YES)[0]; // 加载系统动态库 CJLoadFramework = function(name) &#123; var head = &quot;/System/Library/&quot;; var foot = &quot;Frameworks/&quot; + name + &quot;.framework&quot;; var bundle = [NSBundle bundleWithPath:head + foot] || [NSBundle bundleWithPath:head + &quot;Private&quot; + foot]; [bundle load]; return bundle; &#125;; // keyWindow CJKeyWin = function() &#123; return UIApp.keyWindow; &#125;; // 根控制器 CJRootVc = function() &#123; return UIApp.keyWindow.rootViewController; &#125;; // 找到显示在最前面的控制器 var _CJFrontVc = function(vc) &#123; if (vc.presentedViewController) &#123; return _CJFrontVc(vc.presentedViewController); &#125;else if ([vc isKindOfClass:[UITabBarController class]]) &#123; return _CJFrontVc(vc.selectedViewController); &#125; else if ([vc isKindOfClass:[UINavigationController class]]) &#123; return _CJFrontVc(vc.visibleViewController); &#125; else &#123; var count = vc.childViewControllers.count; for (var i = count - 1; i &gt;= 0; i--) &#123; var childVc = vc.childViewControllers[i]; if (childVc &amp;&amp; childVc.view.window) &#123; vc = _CJFrontVc(childVc); break; &#125; &#125; return vc; &#125; &#125;; CJFrontVc = function() &#123; return _CJFrontVc(UIApp.keyWindow.rootViewController); &#125;; // 递归打印UIViewController view的层级结构 CJVcSubviews = function(vc) &#123; if (![vc isKindOfClass:[UIViewController class]]) throw new Error(invalidParamStr); return vc.view.recursiveDescription().toString(); &#125;; // 递归打印最上层UIViewController view的层级结构 CJFrontVcSubViews = function() &#123; return CJVcSubviews(_CJFrontVc(UIApp.keyWindow.rootViewController)); &#125;; // 获取按钮绑定的所有TouchUpInside事件的方法名 CJBtnTouchUpEvent = function(btn) &#123; var events = []; var allTargets = btn.allTargets().allObjects() var count = allTargets.count; for (var i = count - 1; i &gt;= 0; i--) &#123; if (btn != allTargets[i]) &#123; var e = [btn actionsForTarget:allTargets[i] forControlEvent:UIControlEventTouchUpInside]; events.push(e); &#125; &#125; return events; &#125;; // CG函数 CJPointMake = function(x, y) &#123; return &#123;0 : x, 1 : y&#125;; &#125;; CJSizeMake = function(w, h) &#123; return &#123;0 : w, 1 : h&#125;; &#125;; CJRectMake = function(x, y, w, h) &#123; return &#123;0 : CJPointMake(x, y), 1 : CJSizeMake(w, h)&#125;; &#125;; // 递归打印controller的层级结构 CJChildVcs = function(vc) &#123; if (![vc isKindOfClass:[UIViewController class]]) throw new Error(invalidParamStr); return [vc _printHierarchy].toString(); &#125;; // 递归打印view的层级结构 CJSubviews = function(view) &#123; if (![view isKindOfClass:[UIView class]]) throw new Error(invalidParamStr); return view.recursiveDescription().toString(); &#125;; // 判断是否为字符串 &quot;str&quot; @&quot;str&quot; CJIsString = function(str) &#123; return typeof str == &apos;string&apos; || str instanceof String; &#125;; // 判断是否为数组 []、@[] CJIsArray = function(arr) &#123; return arr instanceof Array; &#125;; // 判断num是否为数字 CJIsNumber = function(num) &#123; return typeof num == &apos;number&apos; || num instanceof Number; &#125;; var _CJClass = function(className) &#123; if (!className) throw new Error(missingParamStr); if (CJIsString(className)) &#123; return NSClassFromString(className); &#125; if (!className) throw new Error(invalidParamStr); // 对象或者类 return className.class(); &#125;; // 打印所有的子类 CJSubclasses = function(className, reg) &#123; className = _CJClass(className); return [c for each (c in ObjectiveC.classes) if (c != className &amp;&amp; class_getSuperclass(c) &amp;&amp; [c isSubclassOfClass:className] &amp;&amp; (!reg || reg.test(c))) ]; &#125;; // 打印所有的方法 var _CJGetMethods = function(className, reg, clazz) &#123; className = _CJClass(className); var count = new new Type(&apos;I&apos;); var classObj = clazz ? className.constructor : className; var methodList = class_copyMethodList(classObj, count); var methodsArray = []; var methodNamesArray = []; for(var i = 0; i &lt; *count; i++) &#123; var method = methodList[i]; var selector = method_getName(method); var name = sel_getName(selector); if (reg &amp;&amp; !reg.test(name)) continue; methodsArray.push(&#123; selector : selector, type : method_getTypeEncoding(method) &#125;); methodNamesArray.push(name); &#125; free(methodList); return [methodsArray, methodNamesArray]; &#125;; var _CJMethods = function(className, reg, clazz) &#123; return _CJGetMethods(className, reg, clazz)[0]; &#125;; // 打印所有的方法名字 var _CJMethodNames = function(className, reg, clazz) &#123; return _CJGetMethods(className, reg, clazz)[1]; &#125;; // 打印所有的对象方法 CJInstanceMethods = function(className, reg) &#123; return _CJMethods(className, reg); &#125;; // 打印所有的对象方法名字 CJInstanceMethodNames = function(className, reg) &#123; return _CJMethodNames(className, reg); &#125;; // 打印所有的类方法 CJClassMethods = function(className, reg) &#123; return _CJMethods(className, reg, true); &#125;; // 打印所有的类方法名字 CJClassMethodNames = function(className, reg) &#123; return _CJMethodNames(className, reg, true); &#125;; // 打印所有的成员变量 CJIvars = function(obj, reg)&#123; if (!obj) throw new Error(missingParamStr); var x = &#123;&#125;; for(var i in *obj) &#123; try &#123; var value = (*obj)[i]; if (reg &amp;&amp; !reg.test(i) &amp;&amp; !reg.test(value)) continue; x[i] = value; &#125; catch(e)&#123;&#125; &#125; return x; &#125;; // 打印所有的成员变量名字 CJIvarNames = function(obj, reg) &#123; if (!obj) throw new Error(missingParamStr); var array = []; for(var name in *obj) &#123; if (reg &amp;&amp; !reg.test(name)) continue; array.push(name); &#125; return array; &#125;;&#125;)(exports); 只要你想，只要你能，更多姿势，等你解锁。 summary&emsp; 无使用场景的学习多半都是在浪费时间，不经常使用的知识也无法产生价值。Cycript 也不例外，如果仅仅是出于好奇，花了两个小时玩了一下下，然后从此别过，其实意义真的不大。有些同学觉得广泛涉猎，在面试的时候可以夸夸其谈，能增加一点“大佬”感，我个人是不认同的，稍微深入一点的问题你就说不上来或者干脆不懂装懂反而会适得其反。所以个人还是建议，既然学了一个东西，就尽力学的深入一点，并在工作中不断思考，如何利用已学知识去提高效率。Cycript 除了在逆向工程中， 在正向开发和日常学习中，依然非常好用。 愿你有所收获~]]></content>
  </entry>
  <entry>
    <title><![CDATA[LLDB 知多少]]></title>
    <url>%2F2019%2F03%2F23%2FLLDB%20%E7%9F%A5%E5%A4%9A%E5%B0%91%2F</url>
    <content type="text"><![CDATA[重识 LLDBLLDB 是什么？&emsp;“如果调试是删除 bug 的过程，那么编程就是引入 bug 的过程。”（Edsger W. Dijkstra） &emsp;对于苹果开发者而言，LLDB 是无人不知的调试工具，然而此知非彼知，相信有相当规模的开发者对 LLDB 的了解仍然停留于几个基础命令的使用，今天让我们来重新认识一下既熟悉又陌生的 LLDB，看看它那些你不曾用过的强大功能，以及如何提高我们的开发效率。 &emsp;开始把玩其功能之前，先搞清楚 LLDB 是什么，简言之，LLDB 是一个有着 REPL 的特性和 C++ 、Python 插件的开源调试器。 &emsp;LLDB is a next generation, high-performance debugger. It is built as a set of reusable components which highly leverage existing libraries in the larger LLVM Project, such as the Clang expression parser and LLVM disassembler.&emsp;LLDB is the default debugger in Xcode on Mac OS X and supports debugging C, Objective-C and C++ on the desktop and iOS devices and simulator. &emsp;以上摘自官方文档中的一段简短的介绍，更多相关信息请参阅 LLDB 官方文档。 LLDB 命令结构&emsp;知道了 LLDB 是什么，还要了解其命令结构及语法，这样才能告别死记命令，开启压榨 LLDB 之路了。LLDB 通用结构的形式如下： &lt;command&gt; [&lt;subcommand&gt; [&lt;subcommand&gt;...]] &lt;action&gt; [-options [option-value]] [argument [argument...]] 其中： command、subcommand：LLDB调试命令的名称。命令和子命令按层级结构来排列：一个命令对象为跟随其的子命令对象创建一个上下文，子命令又为其子命令创建一个上下文，依此类推。 action：命令操作，想在前面的命令序列的上下文中执行的一些操作。 options：命令选项，行为修改器(action modifiers)。通常带有一些值。 argument：命令参数，根据使用的命令的上下文来表示各种不同的东西。 []：表示命令是可选的，可以有也可以没有。 举个例子： 命令：breakpoint set -n main 对应到上面的语法就是： command：breakpoint 断点命令 action：set 设置断点 option：-n 表根据方法 name 设置断点 arguement：mian 表示方法名为 mian 关于原始命令： &emsp;LLDB支持不带命令选项的原始命令，原始命令会将命令后面的所有东西当做参数(arguement)处理。但很多原始命令也可以带命令选项，当你使用命令选项的时候，需要在命令选项后面加 -- 区分命令选项和参数。&emsp;如：expression （就是 p/print/call）、expression -o（就是 po），打印一个UIView对象地址：&emsp;前者是计算其地址的值，后者调用了对象的 description 方法，其中体现了唯一匹配原则：假如根据前n个字母已经能唯一匹配到某个命令，则只写前n个字母等效于写下完整的命令。再用设置断点的命令举例，下面两条命令等效：&emsp;更多命令结构的介绍及用法，请参考 LLDB 入门。接下来介绍点 LLDB 最实用又最容易被忽略的用法。 LLDB 常用命令总结辅助记忆：apropos&emsp;当我们并不能完全记得某个命令的时候，使用 apropos 通过命令中的某个关键字就可以找到所有相关的命令信息。比如: 我们想使用stop-hook的命令，但是已经不记得stop-hook命令是啥样了：实在记不起来也不要慌，这里有 命令list。 一.断点设置&emsp;关于断点设置，多数人都习惯用图形界面去做，但在调试中有些场景仅仅靠图形界面还是不够的，比如：如何通过断点实现类似 KVO 那样对成员变量变化的监听呢？（别跟我说你要加代码重写set方法…即使这样也不靠谱）。下面一一罗列那些好用的断点命令： breakpoint list：查看所有断点列表 breakpoint delete：删除所有断点（可跟组号删除指定组） breakpoint disable/enable：禁用 启用指定断点 breakpoint set -r some：遍历整个项目中包含 some 这个字符的所有方法并设置断点 breakpoint 支持按文件名、函数名、行数、正则等各种条件筛选设置断点，请结合语法并参考官方文档 watchpoint set expression 0x10cc64d50：在内存中为地址为0x10cc64d50的对象设置内存断点 watchpoint set variable xxoo：为当前对象的变量 xxoo 设置内存断点 target stop-hook add -o “frame variable”：添加每次程序 stop 时都希望执行的命令：frame variable（打印当前栈内的所有变量） target stop-hook、watchpoint 的增删改查命令与 breakpoint 的基本相同 更多变态断点玩法需自定义插件支持，迫不及待的你请快进此文 》》》 二.流程控制这两幅图你一定不陌生： 图一 图二 第一个按钮：continue/c 继续执行 第二个按钮： 图一： thread step-over/next/n 当前线程下一步（以一个完整子函数为一步） 图二： thread step-inst-over/ni 当前线程下一步（以一个汇编函数为一步） 第三个按钮： 图一： thread step-in/step/s 当前线程下一步（遇到子函数就进入并且继续单步执行） 图二： thread step-inst-over/si 当前线程下一步（遇到汇编函数就进入并且继续单步执行汇编指令） 第四个按钮：thread step-out/finish 退出当前帧栈 其他命令： thread return：它有一个可选参数，在执行时它会把可选参数加载进返回寄存器里，然后立刻执行返回命令，跳出当前栈帧。这意味这函数剩余的部分不会被执行。这会给 ARC 的引用计数造成一些问题，或者会使函数内的清理部分失效。但是在函数的开头执行这个命令，是个非常好的隔离次函数、伪造返回值的方式。 三.可执行文件&amp;共享库查询命令这些命令在逆向及定位错误时使用频率非常高。 image list：列出主要的可执行文件和所有依赖的共享库。 image lookup –address 0x1ec4：在可执行文件或任何共享库中查找原始地址信息。 image lookup -v –address 0x1ec4：查找完整的源代码行信息。 image lookup –type NSString：根据名称查找对应（NSString）类型的信息。 四.其他常用命令模板 register read：显示当前线程的通用寄存器。 register write rax 123：将一个新的十进制值“123”写入当前线程寄存器“rax”。 memory read –size 4 –format x –count 4 0xbffff3c0：从地址0xbffff3c0读取内存，并显示4个十六进制uint32_t值。 加强版 LLDB —— 修改 .lldbinit 文件 &amp; 插件安装&emsp;前面所列的命令在 这里 都能找到官方说明，更多命令用法有兴趣的建议自己去细细探索，接下来我们将站在巨人的肩膀上，用高手们专门为 LLDB 写的插件去深入挖掘它的潜力。 推荐插件一： facebook 开源的 LLDB 插件 chisel brew install chisel 的安装过程这里就不赘述了，安装成功后，在~/目录下的 .lldbinit 文件中引入对应文件路径，增加一行：command script import /usr/local/opt/chisel/libexec/fblldb.py 后保存， 重启 Xcode即可使用。它提供的快捷 命令清单及说明 这里也不赘述了。截个图感受下它的强大吧： 推荐插件二：DerekSelander/LLDB 该插件与 chisel 都是用 Python 写的，其安装需要手动下载仓库，然后将仓库中 dslldb.py 文件的路径用与上述同样的方式添加到 .lldbinit 中，具体用法也很简单粗暴，就不在这粘贴了，请至 README 领略。 总结：&emsp;看到这，你收获的只有暂时记忆，其实等于毫无所获…而且还浪费了宝贵的几分钟，这也是我极不希望看到的，而避免其成为事实的唯一方式就是，请你打开 Xcode，运行一个项目，参照着文中涉及到的说明文档，试着敲一敲每个命令，体会一下它们的用法与区别。最后，为你的 LLDB 配好插件，去感受它的蜕变，相信我，你的开发效率提升的可不止一点点。学习是一种能力，拒绝操作手册式灌输，分享者多半是在总结学习收获时为读者提供一些思路或方向，这也是我为你保留一丝探索余地的初衷，愿你有所收获。 &emsp;水平有限，请大神多多指正。下篇再会~]]></content>
  </entry>
  <entry>
    <title><![CDATA[拒绝做焦虑贩卖者的韭菜]]></title>
    <url>%2F2019%2F03%2F16%2F%E6%8B%92%E7%BB%9D%E5%81%9A%E7%84%A6%E8%99%91%E8%B4%A9%E5%8D%96%E8%80%85%E7%9A%84%E9%9F%AD%E8%8F%9C%2F</url>
    <content type="text"><![CDATA[多数人的现状&emsp; 无论你出入职场，还是置身亲友，不管你是大龄未婚，还是已为人父母，纵然你已小有成就，亦或名利双收，我依然深信总有那么一群不满现状的人，在各种圈子里、角色下、欲望中，被不同的焦虑环绕着，看看身边年龄相仿的同事、亲友的现状，一切都不言自明。写这篇文章的初衷，是希望我们都能正确的看待焦虑，同时传递给你两个信息：1.不做勤劳的懒惰者；2.你并不孤单，也从未丧失机会。 &emsp; 30左右的年龄（中年危机），在一二线城市没房又没成家（无可增长资产，且未来仍有大笔支出），资本市场持续降温（虽然这是短期的转折，但历史进化永远都是在淘汰弱者），新技术、新概念更新速度越来越快（吾生也有涯，而知也无涯。以有涯随无涯，殆已！已而为知者，殆而已矣！）……这是目前互联网从业者（其实远不止）的大部分现状。这一现状无疑让越来越多的人感到焦虑，特别是对自己有更高期望而瓶颈很难突破的人。当然不排除有无论世界怎么变都无知无觉的人，他们不在我们今天讨论的范畴。 &emsp; 基于上述普遍存在的现状，越来越多的人从中发现了商机：1、知识付费；2、毒鸡汤抢流量。首先声明一点，我是知识付费的拥护者，同时也是受益者。但每当某一领域的需求增长过快时，都难免有一群趁机谋取利益的水军混入其中，良莠不齐，使人们获取有价值信息的成本不断提高。从前几年一度火爆的培训班，到现在线上平台的付费专栏、直播授课，交学费时无不吹破牛皮、信誓旦旦，到最后学无所成的人比比皆是。这究竟是授课的机构和讲师水平的问题，还是学习者自身的学习能力不够或者半途而废造成的呢？我觉得都有问题。毒鸡汤类的公众号、自媒体，更是无处不在的收割着人们的注意力和时间。而被毒鸡汤淹没，只能承认更多是因为个人认知水平决定了识别能力。 &emsp; 如果你认为贩卖焦虑只限于上述商业从事者，那说明你还未曾就此深入的思考过。在我看来，一切利用人们焦虑情绪去做更利于自己事情的人，都是焦虑贩卖者。更有甚者，先诱导人产生焦虑再加以利用。如果你仔细观察，这样的人其实你身边也大有人在。包括很多亲友甚至都在无意识的为你增加焦虑，然后促使你去做什么什么…这里就不区分主观意识的好坏了。总之，我们自己要有足够强的自我掌控力和辨别能力，才能尽可能避免自己和身边的人成为被别人利用情绪进而操纵行为的人。拒绝做炮灰，主导自己命运的方向。 我的挣扎历程&emsp; 我就此现状分享下我的一点心得吧，同时也很想听到你们对自我成长的见解和当前形势的看法。 &emsp; 显然我的现状仍属上述之列（没办法，我开窍晚了），所以曾经我也焦虑过，也被收过智商税，但好在已于一年前想清楚了自己该做什么、想要什么，所以现在的状态总体还不错 —— 每一天都能真切的感到比昨天进步了，无论是专业技能上，还是其他领域的知识，都在不断的添砖加瓦，逐渐的自成体系。如果你也有这种感受，我相信你也早跟焦虑彻底说再见了。至于如何彻底走出焦虑的阴影，找到自己的方向和目标，我仔细回想了那段时间自己的心路历程，大致总结如下： 刨根问底 想明白焦虑是什么？ 我的理解：对现状的不满 + 改变现状时的无力/乏力感 + 对未来的不确定 = 焦虑 焦虑从何而来？ 结合前一点，焦虑主要有以下来源： 职业发展的迷茫与无助 成长速度过慢甚至停止 人与人之间横向的对比 距离自我期望差距太大 人生大事至今毫无头绪 科技进步社会变迁加速 如何彻底根治焦虑？ 同样结合上面的分析，对症下药： 人的精力是有限的，无所不能的天才确实存在，但请相信我，我们都不是。有限的精力一定要花在最有用、长期收益最大的事情上，别想着什么都想学，静下心来分析，找准你所在的领域里，在可以预见的未来某一个不可或缺的方向，花几年时间把它做到极致。（不要抱怨工作太忙没时间想，没时间做，至少你永远都有选择的权利） 学习一定是有方法可循的，最好的方式就是尽可能找到你能接触到的行业大牛（一定要是能说实话的人），实在没机会就关注他们的动态、博客、心得，他们之所以能走的比你快，一定是有很多可取之处的，思考方式、对新事物的态度、乐于分享和总结的精神等等，找到属于你的标杆（不需要很多，一两个足够），照着做就是了，对了，请忘记“速成”这个词。最好的方法一定来自不断的实践与总结，绝不是简单的模仿。 你会经常发现，哇，这小子比我小好几岁，却样样比我优秀！这其实是个不值得有任何感叹的事实，《师说》曾说：“生乎吾后，其闻道也亦先乎吾，吾从而师之”、“闻道有先后，术业有专攻”。人生来先天条件各不相同，即使先天条件不如你的后来比你强了，也没什么可比性。因为你不仅要承认努力很重要，运气也很重要。而决定运气的是我们对这个世界的态度。接纳不够好的自己，做好自己该做的，优秀的人是用来学习借鉴的，而不是衬托自己落魄的。 合理的目标是前提，否则这无异于给自己一个必败的残局和自我否定的恶性循环。人的幸福感很大程度上来源于自恋的感觉被满足，无论是恋爱还是交朋友，都是因为他们认可你，满足了你的自恋情绪，所以他们才能激发你的潜能。同样的，合理的目标是最好的自我鼓励方式，阶段性的达成目标，才能形成自我认可、持续进步、不断缩小与更高期望之间差距的正向循环。 大龄单身青年随处可见，第一个原因，人所受教育的程度与为繁衍后代（完成任务）而结婚的接受度呈明显负相关，也就是说，不是你一个人不想将就，是都不想将就。第二个原因，社会的高速发展注定了年轻一代的高压状态，而且该状态在可预见的未来会一直持续，这种状态决定了接触到靠谱异性圈子的场景越来越少，这两点也是高等教育普及以来人口生育率一路下滑的真相。第三个原因，你不够主动，其实还是有很多合适的人在等你主动，不要做个玻璃心，不试试怎么知道呢？偷偷告诉你，我就是这么成功的。 不管科技如何发达，社会如何变革，既然追不上变化那就别追了，倒不如换个角度想想什么是一成不变的。这之前，先区分一下两个词，趋势和潮流。乍一看以为是同义词，其实很多时候是截然相反的两个东西，但它们又互相作用，类似海洋深处的暗流涌动与我们看得到的狂风骇浪的关系。暗流就是趋势，它是由人类共同体决定的大方向，其力量之大往往是不可抗力，且需要较长的时间才能逐渐显现出来。而潮流则瞬息万变，无法捕捉，但它却又是暗流之上的具体体现。这跟我们想说的有什么关系呢？简单来说，如果你一直忙于追随潮流、赶热门、学热点，就像是在玩冲浪一样，即使短时间内你借着几个浪头获得了升迁加薪的机会，多半也是昙花一现，结局都只会被下一个风头无情的拍入海底。如果你深入观察分析行业内的顶尖人士，你会发现他们都不是全能型的，且他们都具有以不变应万变的本领，因为他们抓住了没变的东西，预测到了未来的趋势。那到底什么是不变的，又如何做出预测的呢？通过不断观察、学习和验证，我得出以下两点： 一，人的基本需求和本性。根据这一点（前提是你对人性和心理学有一定的研究），对未来的预测也比较简单粗暴：关注新的科学和技术，思考科技如何更好的满足人的基本需求和本性：它们有哪些将要落地或者已经落地但需求远大于供给的场景。 二，社会的财富分配规律。无论社会财富积累有多丰裕，穷人所占的比例似乎并无变化，即使人均收入不断增加，那也只是富人拉升平均数的假象。这侧面反映出真正不向命运低头，愿意为改变现状付出代价的人并不多。无论是环境影响还是趋利避害的本能反应，动物都是愿意呆在自己舒适区的，所以，如果你能离开自己的舒适区，把人生当做一场马拉松，你一直都大有机会。但，请给自己成长的时间，相信积累的力量。 回到现实&emsp; 无论道理理解的有多透彻，但人终究还是要活在现实里的，睡觉之前满腔热血，一觉醒来还懒床的人太多了，不差你一个。如何将所学致于实践，这才是拉开人与人之间差距的决定性因素，一提到实干，就不禁想到鸡汤…关于毅力、执行力这一类的书籍和方法论我个人都觉得不值一提，甚至全都是伪命题。我觉得任何一件事能不能做成（别拿与自身不切实际的事钻牛角尖），唯一的决定性因素就是：你到底有多想要。对，任何一件事的失败都可以归结于这一点：你不够想要它。如果这件事对你而言没得选，无可替代，优先级满星，你还需要毅力？还需要想办法提高执行力？怕是不让你做你都要拼命抵抗的吧，所以请为每一个目标赋予其重大到不得不做的意义。而仅次于此的因素，就是做什么，怎么做，关于这一点，前面列出的原因和方案中已经足够详细了。不做懒惰的勤奋者，就是要重视方法和效率，拒绝埋头蛮干。选对方向，用正确的方式，做正确的事，剩下的交给时间。 &emsp; 以上纯属我个人关于如何摆脱焦虑的一些心得和怎样踏实的做好现在的一些思考，不对任何结论的对错及其结果负责，但也希望能为你提供一些可参考之处，当然我也欣然接受任何不同的价值观和看法，欢迎交流。 总结下我想说的话 付费学习是件好事，前提是你并非出于缓解焦虑而付费，而是很清楚你想做什么。 如果你真的决定要变得优秀，请不要着眼于钱，成长若是成真，钱只是顺便的东西。 不要急躁，静下来，好好提升自己的学习能力，认知能力，才能更好的筛选有价值的东西。 别怕你对自己的高要求会让你变得不合群，他们只是害怕你成长的太快而已，你也从未孤单过。 如果你对自己没要求，就开开心的过好每一天，切莫怨天尤人，抱怨是最要不得的情绪，那只会体现自己的无能。]]></content>
  </entry>
  <entry>
    <title><![CDATA[fishhook使用场景&源码分析]]></title>
    <url>%2F2019%2F03%2F08%2Ffishhook%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF%26%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%2F</url>
    <content type="text"><![CDATA[不做伪学习者&emsp;上一篇我们一起分析了 fishhook的实现原理，但很多东西如果我们仅仅知道原理，其实距离真正吸收它并将其转化成自己的生产力还有很长的路。你得弄清楚别人是怎么利用这个原理去解决问题的，还要借鉴别人的设计思想，再结合我们自己的思考不断地实践和总结，才能真正让知识成为自己的生产力。 &emsp;话不多说，进入今天的第一个正题。 fishhook 使用场景&emsp;在 上一篇 里已经为大家演示了它的基本用法，使用很简单，这里就不展开了。它的使用场景正如其名: fishhook，主要用在安全防护领域。当然，大神级的逆向与安全防护专家咱们先不谈，那个级别的高手我相信也不会看到这篇文章，天下没有绝对的安全，黑与白永远都在博弈，所以希望大家不要钻牛角尖，至少咱们不能写出让菜鸟逆向就能轻松搞定的应用对吧？当然，后面咱们也会学习静态分析和汇编的知识，掌握更高级的逆向和防护技能，那都是打好基础的后话了。今天咱们的重点是源码分析，顺便温习下 c 的数据结构。 下面先来了解一下用 fishhook 防 HOOK 的基本思路： 在基础的动态调试逆向中，最常见的就是定位到目标方法后，通过 runtime 中的几种方法交换方式，实现代码注入的目的。为你准备好了相关的文章：iOS代码注入+HOOK微信登录 既然 fishhook 可以拦截系统外部的 C 函数，那自然就可以 HOOK 到 runtime 库中的所有方法。 那我们就将所有可能用来篡改我们 OC 方法实现的 runtime API，都用 fishhook 拦截掉，使其无法用代码注入的方式成功 HOOK。 思路理清了，撸起袖子开始干。 为了方便演示，这里直接搞了一个分类，将ViewController的 实例方法 viewDidAppear: 用 method_exchangeImplementations(Method _Nonnull m1, Method _Nonnull m2) 的方式与 my_viewDidAppear: 交换了实现，上代码：这时我们程序跑起来就可以看到如下输出： 为了阻止其完成方法交换，我们要 hook method_exchangeImplementations 方法，拖入 fishhook 源文件，再添加一个分类并写好 hook method_exchangeImplementations 的代码：（如果成功 hook 了 method_exchangeImplementations ，那别人调用该方法时会进入我们的 myExchange ，然后顺便又把 NSLog hook 了一下，不要被这个绕晕了 😜）再次 Run 起来，咦？肿么肥四？你会发现 method_exchangeImplementations 并没有 HOOK 成功， viewDidAppear: 依然被篡改了实现，问题出在哪了呢？ &emsp;对，聪明的你一定发现了问题所在：是代码执行顺序的问题 &emsp;经过实践，我发现项目里参与编译的文件顺序就是其编译后被加载时的载入顺序（暂未找到官方的编译顺序说明，还请有研究的大佬指点），即此时 ViewController+HOOKTest 的 load 方法会早于 ViewController+FishHook 的 load 调用，所以 method_exchangeImplementations 的实现被我们 HOOK 发生在 viewDidAppear: 被别人交换之后，从而导致防护的失败：验证一下我们的想法： &emsp;如上图所示，在调整了编译文件的顺序之后成功 HOOK 到了 method_exchangeImplementations 的调用，但实际开发中我们不可能采用这么笨的方法，也不可能通过这种方式决定文件的载入顺序，因此我们要想办法保证 fishhook 的代码必须最先执行才行。 &emsp;那如何做到呢？由此前的 dyld背后的故事&amp;源码分析 可以得知，本地的Framework中的类一定会早于后注入的库（动态库例外，非越狱设备是没有插入动态库的权限的）和可执行文件中的类进行初始化。所以我们将 fishhook 的 HOOK 操作代码移到自建的 Framework 中即可：&emsp;至此，我们已经知道了 fishhook 反调试的基本思路，当然，上面的代码只是思路演示，实际开发中，像method_getImplementation、method_setImplementation等函数都需要用同样的方式一一 HOOK，同时，如果自己的项目中已经用到了这些函数，还需要设计相应的白名单方案，并且在检测到是被三方非法 HOOK 时通常直接调用 exit(0) 这类接口终止掉进程。这些细节以后还会详细讲，这里算是抛砖引玉吧。 &emsp;那咱们进入第二个正题，源码分析。 fishhook 源码分析（一）： 在写 fishhook 的代码时，第一件事就是声明一个 rebinding 类型的结构体变量，其源码如下：命名很易读，其中第三个成员 void **replaced 是指向指针的指针，可以理解为一个存着另一个指针地址的指针，在上述示例中， *replaced 取出的就是一个指向共享库中 method_exchangeImplementations 函数实现的指针，再对其取值，**replaced 得到的就是共享库中 method_exchangeImplementations 函数实现的首地址，还不清楚的同学要自己去补补基础了😝。 （二）： 按结构体成员的类型写好声明和实现之后，一一赋值给结构体对应的成员，再把这些结构体放到一个数组中，然后调用重绑定符号函数 rebind_symbols(如果绑定成功返回 0，否则返回 -1)，并将结构体数组和数组长度作为参数传入：接下来咱们一步步的分析在这个函数里具体都做了些啥： 第一件事，调用了这个函数– prepend_rebindings，其具体实现如下：&emsp;咦？传入的第一个参数 &amp;_rebindings_head 是个啥东东？&emsp;看源码：_rebindings_head 被声明为一个指向 rebindings_entry 类型结构体的静态指针变量，那 &amp;_rebindings_head 就是取出这个指针的地址，再看该函数的参数声明 struct rebindings_entry ** ，没错，这又是一个指向指针的指针。&emsp;结构体 rebindings_entry 的三个成员分别是：指向 rebinding 类型结构体的指针（用来指向传入结构体数组的首元素地址）、rebindings_nel：记录此次要重绑定的数量（用于开辟对应大小的空间）、指向下一个 rebindings_entry 类型的结构体（记录下一次需要重绑定的数据），这就是典型的数据结构——链表的一种实现。_rebindings_head 就是指向该链表的指针。 &emsp;为了加深理解，我为你画了一张 prepend_rebindings 函数的作用示意图：&emsp;一句话总结 prepend_rebindings 函数的目的：将新加入的 rebindings 数组不断的添加到 _rebindings_head 这个链表的头部成为新的头节点。 第二件事，对已经载入的镜像文件（也就是库）逐一查找目标符号进行 hook。前面我们已经知道 fishhook 的代码执行时间非常早，所以第一次执行时要 hook 的库可能还没完成装载，因此这里如果是第一次调用会通过一个函数对库的装载完成注册监听和回调的方法：` extern void _dyld_register_func_for_add_image(void (func)(const struct mach_header mh, intptr_t vmaddr_slide)) OSX_AVAILABLE_STARTING(MAC_10_1, __IPHONE_2_0);`&emsp;源码注释如下图：&emsp;当回调到 _rebind_symbols_for_image 时，会将存着待绑定函数信息的链表作为参数传入，用于符号查找和函数指针的交换，第二个参数 header是 当前 image 的头信息，第三个参数 slide是 ASLR 的偏移： 第三件事，根据 fishhook 是如何根据字符串对应在符号表中的指针，找到其在共享库的函数实现 中的几个步骤，去找到目标符号对应指针所指向的函数实现地址：&emsp;这个过程比较枯燥，无非就是按照规则计算各种表的地址和指针在表中的偏移量。 最后一件事，根据算好的符号表地址和偏移量，找到在符号表中用于指向共享库目标函数的指针，然后将该指针的值（即目标函数的地址）赋值给我们的 *replaced，最后修改该指针的值为我们的 replacement（新的函数地址），perform_rebinding_with_section 的源码实现： fishhook 源码之旅，告一段落&emsp;如果不算注释，fishhook 的源码实现一共 180+ 行，通过对其源码的分析，如果做到读懂它的每一行，我相信不管是对指针的理解和使用，还是对链表的数据结构和实现方式，你都会有更好的理解。当然，你对 MachO 的文件结构和加载机制，也更加了然于胸，同时还 get 了基本的安全防护技巧。 愿你不虚此行。]]></content>
  </entry>
  <entry>
    <title><![CDATA[fishhook的实现原理浅析]]></title>
    <url>%2F2019%2F03%2F04%2Ffishhook%E7%9A%84%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86%E6%B5%85%E6%9E%90%2F</url>
    <content type="text"><![CDATA[打开姿势很重要&emsp;早些时候，iOS中一提到“黑魔法”、HOOK，很多人第一时间想到的就是 AOP RunTime MethodSwizzling 这些不明觉厉的东西，它们的基本用法其实都不难，真正难的是如何在合适的地方用好它们。 &emsp;任何事物都有两面性，越强大其可能带来的隐患也越具有毁灭性。苹果提供的运行时机制固然大有用处，但如果在项目中滥用（更不是用来当做面试提升逼格的），很多时候只会适得其反，详细误区请参考iOS界的毒瘤-MethodSwizzling。 &emsp;关于 MethodSwizzling 的用法在之前的文章中也有过讲解，请参考MethodSwizzling的几种姿势。 该方式更多的用于性能监测、 crash 的兼容和上报、反破解防护等一些工具的开发中，而在逆向中，在面对有相应安全防护措施的应用时，其用武之地比较有限。 &emsp;无独有偶，“黑魔法”可不只有 RunTime ，今天我们来聊聊在逆向中常用的另一种HOOK方式：fishhook。 fishhook 背后的故事（一）实现原理&emsp;fishhook 是 FaceBook 开源的可以动态修改 MachO 符号表的工具。fishhook 的强大之处在于它可以 HOOK 系统的静态 C 函数。 &emsp;大家都知道 OC 的方法之所以可以 HOOK 是因为它的运行时特性，OC 的方法调用在底层都是 msg_send（id,SEL）的形式，这为我们提供了交换方法实现（IMP）的机会，但 C 函数在编译链接时就确定了函数指针的地址偏移量（Offset），这个偏移量在编译好的可执行文件中是固定的，而可执行文件每次被重新装载到内存中时被系统分配的起始地址（在 lldb 中用命令image List获取）是不断变化的。运行中的静态函数指针地址其实就等于上述 Offset + Mach0 文件在内存中的首地址： &emsp;既然 C 函数的指针地址是相对固定且不可修改的，那么 fishhook 又是怎么实现 对 C 函数的 HOOK 呢？其实内部/自定义的 C 函数 fishhook 也 HOOK 不了，它只能HOOK Mach-O 外部（共享缓存库中）的函数。fishhook 利用了 MachO 的动态绑定机制（不清楚的同学看这里：MachO 文件结构详解、dyld背后的故事&amp;源码分析 ）：苹果的共享缓存库不会被编译进我们的 MachO 文件，而是在动态链接时才去重新绑定。苹果采用了PIC（Position-independent code）技术成功让 C 的底层也能有动态的表现： 编译时在 Mach-O 文件 _DATA 段的符号表中为每一个被引用的系统 C 函数建立一个指针（8字节的数据，放的全是0），这个指针用于动态绑定时重定位到共享库中的函数实现。 在运行时当系统 C 函数被第一次调用时会动态绑定一次，然后将 Mach-O 中的 _DATA 段符号表中对应的指针，指向外部函数（其在共享库中的实际内存地址）。 fishhook 正是利用了 PIC 技术做了这么两个操作： 将指向系统方法（外部函数）的指针重新进行绑定指向内部函数/自定义 C 函数。 将内部函数的指针在动态链接时指向系统方法的地址。 这样就把系统方法与自己定义的方法进行了交换，达到 HOOK 系统 C 函数（共享库中的）的目的。 （二）用汇编解析过程&emsp;为了更好的理解 fishhook 是如何 HOOK 系统的 C 函数，我们以 HOOK NSLog 为例，从汇编着手来一步步去分析，为大家扒开 fishhook 实现 HOOK 系统 NSLog 的全过程。123注：对于非懒加载符号表，dyld 会在动态链接时就链接动态库 对于懒加载符号表，dyld 会在运行时函数第一次被调用时动态绑定一次 NSLog 在懒加载表中 1.验证系统的动态绑定：&emsp;新建一个空工程，写下这两行代码： &emsp;编译一下工程，在目录Products下将 .app内的可执行文件拷出用 MachOView 打开：记下0x3028这个偏移值，这就是用于重定向到共享库中的那个指针相对于 MachO文件的偏移量。 在两个 NSLog 处分别加上断点，将工程 Run 起来，把 Debug -&gt; Debug Workflow -&gt; Always Show Disassembly 勾选上，用于查看汇编信息，断点断住后获取 MachO 在内存中的首地址：0x3028+0x000000010b0f7000 就是用于重定向到共享库中的那个指针的内存地址。此时我们查看该地址是否已经被重定向： 拿到该指针当前保存的值，iOS 的 CPU 是小端序，当前机型为 64 位 CPU，所以倒序读 8 个字节就是指针的值：0x010b0f89a0 dis -s 是反汇编命令，我们发现此时该指针指向的函数正在调用系统动态绑定的函数 进一步查看调用函数详细信息：libdyld.dylib`dyld_stub_binder 这是在干嘛？没错，这就是第一次调用 NSLog 时系统去重新绑定位懒加载符号表中 NSLog 对应的指针所指向的位置。 接下来我们过掉第一次断点，让断点断在第二个 NSLog 处，再次查看符号表中该指针（依然是 0x3028+0x000000010b0f7000 这个地址）所指向的地址，&emsp;我们发现，它指向的地址由之前的 0x010b0f89a0变为 0x010b491276 了，对应的函数也由之前的 dyld_stub_binder 变为 NSLog ，这意味着该函数的动态绑定已经完成。以上，我们验证了 iOS 的动态绑定全过程。 2.验证 fishhook 的重绑定：&emsp;我们将 fishhook文件拖入工程，并添加一个简单的绑定：注意：修改文件后重新编译的 MachO 文件，符号表里的指针偏移值可能会改变，重新运行的程序内存首地址也会发生变化，需要你重新拿到它们计算得出指针新的内存地址。 我们运行起来之后点击屏幕进入上图所示断点，查看符号表中原本指向系统 NSLog 的指针指向：此时该指针的指向被修改为我们自定义的函数 myNslog 了，而将系统重定位的外部函数地址保存到了另一个自定义函数指针 sys_nslog 中：以上，我们通过断点分析汇编信息，验证了 fishhook 实现 HOOK 系统外部函数的思路。接下来我们结合 fishhook 的官方说明看它是如何根据字符串（方法名）找到对应指针在符号表中的偏移值的。 （三）fishhook 是如何根据字符串对应在符号表中的指针，找到其在共享库的函数实现的？fishhook 官方给了这张图：这张图主要在描述如何由一个字符串（比如 “NSLog”），跟着它在 MachO 文件的懒加载表中对应的指针，一步步的找到该指针指向的函数实现地址，大致步骤如下： 在 Lazy Symbol Pointers 中该字符串的顺序就是其在 Dynamic Symbols Table -&gt; Indirect Symbols 表中的位置（这里是第一个）在实际计算地址中用到了 Load Commands 中对应头信息的 Reserved1 的 value （section基地址+ 偏移量 value = 其在 Indirect Symbols 中对应的 offset）:下篇源码分析有详细说明。 Dynamic Symbols Table -&gt; Indirect Symbols 表中的第一个对应的 Data 值（0x7A=122）就是其在Symbols Table -&gt; Symbols 中的索引。 在 Symbols Table -&gt; Symbols 中索引为 122 的位置对应的 Data = 0x9B： 上表中的 Data（0x9B） + String Table的起始地址（0x4F04）就是目标函数实现的地址： 总结&emsp;今天我们结合 iOS 的共享缓存库中采用的 PIC 技术，介绍了 fishhook 对系统外部函数实现 HOOK 基本原理和具体过程，并通过反汇编命令一一验证了 iOS 的动态绑定过程和 fishhook 的重新绑定机制，最后把 fishhook 在符号表中根据符号指针寻找函数实现的步骤做了演示。 愿你有所收获！ 水平有限，请多指教~ &emsp;鉴于篇幅过长会影响大家的阅读体验，fishhook 的源码分析与应用场景以及安全防护的分享，我们这里继续]]></content>
  </entry>
  <entry>
    <title><![CDATA[dyld背后的故事&源码分析]]></title>
    <url>%2F2019%2F02%2F25%2Fdyld%E8%83%8C%E5%90%8E%E7%9A%84%E6%95%85%E4%BA%8B%26%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%2F</url>
    <content type="text"><![CDATA[什么是dyld？&emsp;dyld（the dynamic link editor）是苹果的动态链接器，是苹果操作系统的一个重要组成部分，当系统内核做好启动程序的准备工作之后，余下的工作会交给dyld来负责处理。那它存在的意义是什么？它又具体都负责做些什么呢？这一篇我们一起来一探究竟。前方长篇预警~ dyld存在的意义&emsp;存在即合理，但我们要弄清楚其合理性所在。先从可执行文件是如何由源码生成的说起。 1.可执行文件的生成–静态链接。先看下面这段代码： 1234567#include&lt;stdio.h&gt;int main()&#123; printf(&quot;Hello World\n&quot;); return 0;&#125; &emsp;假设这段代码源文件为hello.c，我们输入最简单的命令：$gcc hello.c $./a.out，那么终端会输出：Hello World，在这个过程中，事实上经过了四个步骤：预处理、编译、汇编和链接。我们来具体看每一步都做了些什么。 &emsp;预编译的主要处理规则如下： 删除所有#define，并将所有宏定义展开 将被包含的文件插入到预编译指令(#include)所在位置（这个过程是递归的） 删除所有注释：// 、/ /等 添加行号和文件名标识，以便于编译时编译器产生调试用的行号信息及编译时能够显示警告和错误的所在行号 保留所有的#pragma编译器指令，因为编译器须要使用它们 结合上述规则，当我们无法判断宏定义是否正确或者头文件是否包含时可以查看预编译后的文件来确定问题，预编译的过程相当于如下命令：$gcc -E hello.c -o hello.i 或$cpp hello.c &gt; hello.i &emsp;编译的过程就是把预处理完的文件进行一些列词法分析、语法分析、语义分析及优化后生产相应的汇编代码文件，这个过程往往是我们整个程序构建的核心部分，也是最复杂的部分之一，编译的具体步骤涉及到编译原理等内容，这里就不展开了。我们使用命令：$gcc -S hello.c -o hello.s可以得到汇编输出文件hello.s。 &emsp;对于 C 语言的代码来说，这个预编译和编译的程序是 ccl，但是对于 C++ 来说，对应的程序是 ccplus；Objective-C 的是 ccobjc；Java 是 jcl。所以实际上 gcc 这个命令只是这些后台程序的包装，它会根据不同的参数要求去调用预编译编译程序 ccl、汇编器 as、链接器 ld。 &emsp;汇编器是将汇编代码转变成机器可以执行的指令，每一个汇编语句几乎都对应一条机器指令。所以汇编器的汇编过程相对于编译器来讲比较简单，它没有复杂的语法，也没有语义，也不需要做指令优化，只是根据汇编指令和机器指令的对照表一一翻译就可以了，我们使用命令：$as hello.s -o hello.o 或$gcc -c hello.s -o hello.o来完成汇编，输出目标文件（Object File）：hello.o。 &emsp;链接是让很多人费解的一个过程，为什么汇编器不直接输出可执行文件而是一个目标文件呢？链接过程到底包含了什么内容？为什么要链接？ &emsp;这就要扯一下计算机程序开发的历史了，最早的时候程序员是在纸带上用机器语言通过打孔来实现程序的，连汇编语言都没有，每当程序修改的时候，修改的指令后面的位置要相应的发生移动，程序员要人工计算每个子程序或跳转的目标地址，这个过程叫重定位。很显然这样修改程序的代价随着程序的增大会变得高不可攀，并且很容易出错，于是有先驱发明了汇编语言，汇编语言使用接近人类的各种符号和标记来帮助记忆，更重要的是，这种符号使得人们从具体的指令地址中逐步解放出来，当人们使用这种符号命名子程序或者跳转目标以后，不管目标指令之前修改了多少指令导致目标指令的地址发生了变化，汇编器在每次汇编程序的时候都会重新计算目标指令的地址，然后把所有引用到该指令的指令修正到正确的地址，这个过程不需要人工参与。 &emsp;有了汇编语言，生产力极大地提高了，随之而来的是软件的规模与日俱增，代码量快速膨胀，导致人们开始考虑将不同功能的代码以一定的方式组织起来，使得更加容易阅读和理解，更便于日后修改和复用。自然而然的，我们开始习惯用若干个变量和函数组成一个模块（比如类），然后用目录结构来组织这些源代码文件，在一个程序被多个模块分割以后，这些模块最终如何组合成一个单一的程序是须要解决的问题。这个问题归根结底是模块之间如何通信的问题，也就是访问函数需要知道函数的地址，访问变量需要知道变量的地址，这两个问题都是通过模块间符号的引用的方式来解决。这个模块间符号引用拼接的过程就是链接。 &emsp;链接的主要内容就是把各个模块之间相互引用的部分处理好，使得各个模块之间能够正确地衔接。本质上跟前面描述的“程序员人工调整地址”没什么区别，只不过现代的高级语言的诸多特性和功能，使得编译器、链接器更为复杂，功能更强大。链接过程包括了地址和空间分配、符号决议（也叫“符号/地址绑定”，“决议”更倾向于静态链接，而“绑定”更倾向于动态链接，即适用范围的区别）和重定位，链接器将经过汇编器编译成的所有目标文件和库进行链接形成最终的可执行文件，而最常见的库就是运行时库（RunTime Library），它是支持程序运行的基本函数的集合。库其实就是一组最常用的代码编译成目标文件后的打包存放。 &emsp;知道了可执行文件是如何生成的，我们再来看看它又是如何被装载进系统中运行起来的。 2.可执行文件的装载与动态链接。装载&emsp;装载与动态链接其实内容特别多，很多细节需要对计算机底层有非常扎实的理解，鉴于目前我的能力尚浅，这里只做粗略的介绍，推荐有兴趣的同学购买《程序员的自我修养–链接、装载与库》这本书了解更多细节。 &emsp;可执行文件(程序)是一个静态的概念，在运行之前它只是硬盘上的一个文件；而进程是一个动态的概念，它是程序运行时的一个过程，我们知道每个程序被运行起来后，它会拥有自己独立的虚拟地址空间，这个地址空间大小的上限是由计算机的硬件（CPU的位数）决定的，比如32位的处理器理论最大虚拟空间地址为0~2^32-1。即0x00000000~0xFFFFFFFF，当然，我们的程序运行在系统上时是不可能任意使用全部的虚拟空间的，操作系统为了达到监控程序运行等一系列目的，进程的虚拟空间都在操作系统的掌握之中，且在操作系统中会同时运行着多个进程，它们彼此之间的虚拟地址空间是隔离的，如果进程访问了操作系统分配给该进程以外的地址空间，会被系统当做非法操作而强制结束进程。 &emsp;将硬盘上的可执行文件映射到虚拟内存中的过程就是装载，但内存是昂贵且稀有的，所以将程序执行时所需的指令和数据全部装载到内存中显然是行不通的，于是人们研究发现了程序运行时是有局部性原理的，可以只将最常用的部分驻留在内存中，而不太常用的数据存放在磁盘里，这也是动态装载的基本原理。覆盖装入和页映射就是利用了局部性原理的两种经典动态装载方法，前者在发明虚拟内存之前使用比较广泛 ，现在基本已经淘汰，主要使用页映射。装载的过程也可以理解为进程建立的过程，操作系统只需要做以下三件事情： 创建一个独立的虚拟地址空间 读取可执行文件头，并且建立虚拟空间与可执行文件的映射关系 将CPU的指令寄存器设置成可执行文件的入口地址，启动运行 动态链接&emsp;前面我们在生成可执行文件时说的链接是静态链接。最后一步是将经过汇编后的所有目标文件与库进行链接形成可执行文件，这里的提到的库，包括了很多运行时库。运行时库通常是支持程序运行的基本函数的集合，也就意味着每个进程都会用到它，如果每一个可执行文件都将其打包进自己的可执行文件，都用静态链接的方式，虽然原理上更容易理解，但是这种方式对计算机的内存和磁盘的空间浪费非常严重！在现在的Linux系统中，一个普通的程序会使用到的C语言静态库至少在1M以上，如果系统中有2000个这样的程序在运行，就要浪费将近2G的空间。为了解决这个问题，把运行时库的链接过程推迟到了运行时在进行，这就是动态链接（Dynamic Linking）的基本思想。动态链接的好处有以下几点： 解决了共享的目标文件存在多个副本浪费磁盘和内存空间的问题 减少物理页面的换入换出，还增加了CPU的缓存命中率，因为不同进程间的数据和指令访问都集中在了同一个共享模块上 系统升级只需要替换掉对应的共享模块，当程序下次启动时新版本的共享模块会被自动装载并链接起来，程序就无感的对接到了新版本。 更方便程序插件（Plug-in）的制作，为程序带来更好的可扩展性和兼容性。 &emsp;至此，终于说回了我们今天的主角：dyld,现在咱们知道了它存在的意义——动态加载的支持。 动态链接的步骤&emsp;现在，我们理解了为什么需要动态链接，dyld作为苹果的动态链接器，但本质上dyld也是一个共享对象：上图是dyld在系统中的路径，在iPhone中只有获取root权限（也就是越狱）的用户才能访问，后面在逆向实战中会给大家演示。&emsp;既然dyld也是一个共享对象，而普通共享对象的重定位工作又是由dyld来完成的，虽然也可以依赖于其他共享对象，但被依赖的共享对象还是要由dyld来负责链接和装载。那么dyld的重定向由谁来完成呢？dyld是否可以依赖其他的共享对象呢？这是一个“鸡生蛋，蛋生鸡”的问题，为了解决这个问题，动态链接器需要有些特殊性： 动态链接器本身不依赖其他任何共享对象 动态链接器本身所需要的全局和静态变量的重定位工作由它本身完成 上述第一个条件在编写动态链接器时可以人为的控制，第二个条件要求动态链接器在启动时必须有一段代码可以在获得自身的重定位表和符号表的同时又不能用到全局和静态变量，甚至不能调用函数，这样的启动代码被称为自举（Bootstrap）。当操作系统将进程控制权交给动态链接器时，自举代码开始执行，它会找到动态链接器本身的重定位入口（具体过程和原理暂未深究），进而完成其自身的重定位，在此之后动态链接器中的代码才可以开始使用自己的全局、静态变量和各种函数了。 &emsp;完成基本的自举以后，动态链接器将可执行文件和链接器本身的符号表合并为一个，称为全局符号表。然后链接器开始寻找可执行文件所依赖的共享对象，如果我们把依赖关系看作一个图的话，那么这个装载过程就是一个图的便利过程，链接器可能会使用深度优先或者广度优先也可能其他的算法来遍历整个图，比较常见的算法都是广度优先的。 &emsp;每当一个新的共享对象被装载进来，它的符号表会被合并到全局符号表中，装载完毕后，链接器开始重新遍历可执行文件和共享对象的重定位表，将每个需要重新定位的位置进行修正，这个过程与静态链接的重定位原理基本相同。重定位完成之后，动态链接器会开始共享对象的初始化过程，但不会开始可执行文件的初始化工作，这将由程序初始化部分的代码负责执行。当完成了重定位和初始化之后，所有的准备工作就宣告完成了，这时动态链接器就如释重负，将进程的控制权交给程序的入口并且开始执行。 dyld源码分析&emsp;我们来通过分析dyld的源码验证上述过程：新建一个Objective-C的iOS项目作为示例，在任意参与编译的类中重写 +load 方法并添加断点，运行起来进入断点即可看到上图所示的dyld调用堆栈信息。 &emsp;从图中frame9的汇编信息中，你一定发现了在dyld的入口函数__dyld_start里出现了dyldbootstrap::start(macho_header const*, int, char const**, long, macho_header const*, unsigned long*)的函数调用，那这段代码是干嘛的呢？上源码：这个函数做了这么几件事：dyld的自举（slideOfMainExecutable、rebaseDyld 完成自身的重定位）、开放函数使用：mach_init、设置堆栈保护：__guard_setup、开始装载共享对象：dyld::_main。 在dyld::_main中主要做了以下几件事 配置环境： 加载动态库(共享缓存)： 实例化主程序： 插入动态库：（越狱中编写插件就是修改这个配置让自己写的库被加载，这个配置也只有root用户才有权限修改，本来是苹果给自己预留插入动态库用的） 重定位完所有需要重定位的库，然后初始化主程序： 经过一系列初始化函数的调用，到notifySingle函数 通过断点调试发现此函数的回调是load_images这个函数 load_images里执行call_load_methods函数 循环调用各个类的 load 方法 然后调用了 doModInitFunctions 函数 内部会调用全局C++对象的构造函数（带attribute((constructor))的c函数） 返回主程序的入口函数，进入主程序的main函数：历经千辛万苦，我们抵达了最熟悉的main函数： 总结&emsp;这一篇我们从dyld出发，将程序从编译到装载的整个过程串了一遍，并结合分析了dyld的源码，这些资源都是开源的，有兴趣一定要自己去自己啃一下，通过看苹果对数据结构的使用和设计，还是有很多启发的。在后续的逆向学习中，这一篇的研究或许能让我不仅知其然，而且知其所以然。 路过的大神还望多多指教~]]></content>
  </entry>
  <entry>
    <title><![CDATA[MachO 文件结构详解]]></title>
    <url>%2F2019%2F02%2F21%2FMachO%20%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84%E8%AF%A6%E8%A7%A3%2F</url>
    <content type="text"><![CDATA[概念——什么是MachO？&emsp; 苹果开发者对它一定不陌生，特别是喜欢逆向的同学，对它的研究更是必不可少。在可安装的每一个.app包中，都有一个与app同名的可执行文件，它可能长这样：（如果你碰到显示为白色的MachO文件，说明当前用户对其没有可执行权限）&emsp; MachO其实是Mach Object的缩写，是在Mac以及iOS上可执行的一种文件格式，包括但不限于：可执行文件(.out .o)、动态库、静态库、dyld、目标文件，官方文档中列举如下：它类似于Windows上的PE、Linux上的ELF格式，我们用file命令看上图中 AlipayWallet 的文件类型信息：可以看到，该示例的MachO文件属于通用二进制文件（苹果提出的一种能同时适用多种架构二进制文件的程序代码），并支持在两种架构上运行：arm_v7和arm64，包含了多种架构的MachO文件可以通过lipo thin命令进行拆分：lipo AlipayWallet -thin armv7 -output alipayArmv7，同样也能用lipo create进行合并：lipo alipayArm64 alipayArmv7 -create -output AlipayWalletNew，大家可以自己实践一下。 构造——MachO的内部结构是怎样的？一：简单的讲，它包括以下四个组成部分： Header （头部） 用于快速确认该文件的CPU类型、文件类型等信息 LoadCommands （加载命令） 用于告诉loader如何设置并加载二进制数据 Data （数据段 segment） 存放数据：代码、字符常量、类、方法等 可以拥有多个segment，每个segment可以有零到多个section。每个段都有一段虚拟地址映射到进程的地址空间 Loader Info （链接信息） 一个完整的用户级MachO文件的末端是一系列链接信息。其中包含了动态加载器用来链接可执行文件或者依赖所需使用的符号表、字符串表等 &emsp; 来用MachOView验证一下该示例的MachO文件结构： 二：逐一探索：1.Header&emsp; 除了用MachOView能查看MachO文件信息，还可以通过otool命令查看，我们先来分析Header中的内容：otool -h AlipayWallet： magic：MachO文件的魔数，用来确定其属于64位（0xfeedfacf）还是32位（0xfeedface）例子中有两个Header，分别对应的是armv7和arm64的Header，前者32位，后者64位。 cputype和cupsubtype代表的是cpu的类型和其子类型，例子中分别是12(c)与9、16777228(100000c)与0定义如下： 1234#define CPU_TYPE_ARM((cpu_type_t) 12)#define CPU_SUBTYPE_ARM_V7((cpu_subtype_t) 9)#define CPU_TYPE_ARM64((cpu_type_t) 16777228)#define CPU_SUBTYPE_AR64M_ALL((cpu_subtype_t) 0) 接着是filetype，2，代表可执行的文件：12345678910#define MH_EXECUTE 0x2 /* demand paged executable file */``` * ncmds 指的是加载命令(load commands)的数量，例子中一共75个，编号0-74* sizeofcmds 表示75个load commands的总字节大小， load commands区域是紧接着header区域的* 最后个flags 标识二进制文件支持的功能，主要与系统的加载、链接有关。这里为你准备了 mach_header 的苹果官方文档说明：（更多详细定义请参考[loader.h](https://opensource.apple.com/source/xnu/xnu-1456.1.26/EXTERNAL_HEADERS/mach-o/loader.h)）![](https://user-gold-cdn.xitu.io/2019/2/21/1690f152b4cd7c0e?w=896&amp;h=736&amp;f=png&amp;s=192704)#### 2.LoadCommands我们继续用命令查看：`otool -l alipayArm64`，该示例共有75个加载指令，我们只截取一个作为代表，分别为出现在segment和section中的每一个参数进行注释： Load command 1 cmd LC_SEGMENT_64 // cmd 是load command的类型，LC_SEGMENT_64的含义是将这个64位的段映射到进程地址空间，即加载命令 cmdsize 712 // 代表load command的大小 segname TEXT // 16字节的段名字 TEXT vmaddr 0x0000000100000000 // 段的虚拟内存起始地址 vmsize 0x00000000036a4000 // 段的虚拟内存大小 fileoff 0 // 段在文件中的偏移量 filesize 57294848 // 段在文件中的大小 maxprot 0x00000005 // 段页面所需要的最高内存保护（4=r,2=w,1=x） initprot 0x00000005 // 段页面初始的内存保护 nsects 8 // 段中包含section的数量 flags 0x0 // 其他杂项标志位Section sectname text // 第一个是text ,就是主程序代码 segname TEXT // 该section所属的 segment名，第一个是TEXT addr 0x0000000100006110 // 该section在内存的启始位置，0x100006110 size 0x000000000358a268 // size 该section的大小，0x358a268 offset 24848 // 24848 0x6110 align 2^4 (16) // 字节大小对齐，16 reloff 0 // 重定位入口的文件偏移 0 nreloc 0 // 需要重定位的入口数量 0 flags 0x80000400 // 包含section的type和attributes reserved1 0 // …保留用 reserved2 0 // …保留用`注释完毕，我又为你准备了 segment和section 的苹果官方文档说明：（更多详细定义请参考loader.h）&emsp; 我总结了最常见的加载命令如下： LC_SEGMENT_64： 将该段(64位)映射到进程地址空间中 LC_DYLD_INFO_ONLY：加载动态链接库信息（重定向地址、弱引用绑定、懒加载绑定、开放函数等的偏移值等信息） LC_SYMTAB：载入符号表地址 LC_DYSYMTAB：载入动态符号表地址 LC_LOAD_DYLINKER：加载动态加载库，可以看出示例使用的是/usr/lib/dyld LC_UUID：确定文件的唯一标识，crash解析中也会有这个，去检测dysm文件和crash文件是否匹配 LC_VERSION_MIN_MACOSX/LC_VERSION_MIN_IPHONEOS：确定二进制文件要求的最低操作系统版本 LC_SOURCE_VERSION：构建该二进制文件使用的源代码版本 LC_MAIN：设置程序主线程的入口地址和栈大小 LC_ENCRYPTION_INFO_64：获取加密信息 LC_LOAD_DYLIB：加载额外的动态库 LC_FUNCTION_STARTS：定义一个函数起始地址表,使调试器和其他程序易于看到一个地址是否在函数内 LC_DATA_IN_CODE：定义在代码段内的非指令的表 LC_CODE_SIGNATURE：获取应用签名信息3.Data、链接信息&emsp; 如果说前面两部分的主要作用，是让kern内核知道如何读取MachO文件，并指定MachO文件的动态链接器(dyly)用来完成后续的动态库加载，然后设置好程序入口等一些列程序启动前的信息，那么Data和链接信息部分，就相当于当程序运行起来后，为每一个映射到虚拟内存中的指令操作提供真实的物理地址支持。详细的过程会面会单独写一篇文章展开来讲。 收获——熟悉MachO可以做什么&emsp; 理解原理很重要，了解MachO格式的结构和加载运行，不仅可以帮助我们理解MacOS和iOS的app可执行文件启动过程，还能做且不限于： bitcode分析 crash符号化 符号模块查找 非OC函数switch 包支持架构分析 常量字符串分析 进程启动速度优化 学习经典的数据结构 希望你有所收获！下篇我们主要围绕dyld讲动态加载过程，see you~ 参考文章： 趣探 Mach-O：文件格式分析 Mach-O文件格式和程序从加载到执行过程]]></content>
  </entry>
  <entry>
    <title><![CDATA[非越狱下iOS代码注入&微信登录HOOK]]></title>
    <url>%2F2019%2F02%2F10%2F%E9%9D%9E%E8%B6%8A%E7%8B%B1%E4%B8%8BiOS%E4%BB%A3%E7%A0%81%E6%B3%A8%E5%85%A5%26%E5%BE%AE%E4%BF%A1%E7%99%BB%E5%BD%95HOOK%2F</url>
    <content type="text"><![CDATA[&emsp;在之前这篇iOS应用脚本重签名中，我们对脱壳的微信安装包进行重签名，并成功在真机上运行起来，完成了iOS逆向的准备工作。这一篇我们将通过演示如何HOOK微信登录事件并获取到用户密码，把iOS代码注入的几种方式串起来做个简单地概述。不管做逆向还是正向开发，这些都能为你提供一些在应用安全攻防方面的思路。&emsp;当拿到别人的脱壳包，想要HOOK别人的方法做些小插件，首先需要程序执行你写的代码，你才有机会利用runtime的运行时机制去做自己的事情，关于方法混淆的注意事项请参考这一篇。让程序执行我们写的代码就需要修改MachO文件，关于MachO我在这一篇里详细讲解了，这篇主要讲代码注入的事儿： Framework注入 添加自己的Framework： 写好测试代码，在上一篇重签名脚本的基础上加一行修改MachO加载路径的代码：yololib &quot;$TARGET_APP_PATH/$APP_BINARY&quot; &quot;Frameworks/SharonFramework.framework/SharonFramework&quot;，Framework文件名为你自己刚刚添加的。直接Run！大功告成。 Dylib注入 添加自己的Dylib：&emsp;要注意的是这样添加的MacOS的Dylib需要将BuildSetting–&gt;Base SDK改为iOS，BuildSetting–&gt;CODE SIGN IDENTITY改为iPhone Developer即可在iPhone上运行。另外，与Framework不同的是它需要手动添加关联库：同样在重签名脚本中加一行修改MachO可执行文件路径的代码：yololib &quot;$TARGET_APP_PATH/$APP_BINARY&quot; &quot;Frameworks/libSharonLibrary.dylib&quot;，dylib文件名为你自己刚刚添加的。直接Run！ &emsp;至此我们已经完成了代码注入的第一步，让别人的应用在运行时执行我们写的代码，这个过程中你可能会碰到签名不成功等各种各样的奇葩问题，不要慌，静下心分析，实在不行你可以留言^_^ ~，接下来我们要尝试HOOK微信的登录按钮事件。 &emsp;同步几个共识： +load 方法的调用发生在类或分类被 runtime 加载（编译后的可执行文件被装载到内存中）时，只调用1次。 子类的 +load 方法会在它的所有父类的 +load 方法之后执行，而分类的 +load 方法会在它的主类的 +load 方法之后执行。 如果子类没有实现 +load 方法，那么当它被加载时 runtime 是不会去调用父类的 +load 方法的。同理，当一个类和它的分类都实现了 +load 方法时，两个方法都会被调用。 不同的类之间的 +load 方法的调用顺序是不确定的。 基于+load方法的上述特点，它是实现方法混淆的最佳入口。 通过viewDebug+头文件分析目标Method如上图所示，我们很快定位到登录按钮的target为WCAccountLoginControlLogic，action为onFirstViewLogin，我们在通过头文件分析一下，class-dump怎么用相信你Google一下就搞得定，这里就不赘述啦，拿到微信的所有头文件丢到sublime里全局搜索：果然，找到了目标文件，点击进入头文件查看Method列表：验证了我们的分析是正确的。用同样的方式我们定位账号密码输入页登录按钮的target为WCAccountMainLoginViewController，action为onNext：我们将通过HOOK登录按钮点击事件获取密码输入框里的内容。 MethodSwizzling的几种姿势 class_replaceMethodclass_replaceMethod本身会尝试调用class_addMethod和method_setImplementation，所以直接调用class_replaceMethod就可以了。 class_getInstanceMethod &amp; method_setImplementation method_exchangeImplementations 心细的同学一定会发现，在这个场景下，如果直接写个OC方法然后用method_exchangeImplementations交换新旧方法的实现有问题：因为my_next中的self是WCAccountMainLoginViewController，调用my_next会找不到方法。解决方案是手动为WCAccountMainLoginViewController添加my_next方法。&emsp;由此我们也发现，method_exchangeImplementations在分类或子类中对主/父类重载的方法进行交换时更方便些，不会出现上述问题。所以在逆向中一般不直接使用method_exchangeImplementations，更倾向于前两种方式。]]></content>
  </entry>
  <entry>
    <title><![CDATA[走出区块链认知的误区]]></title>
    <url>%2F2019%2F01%2F31%2F%E8%B5%B0%E5%87%BA%E5%8C%BA%E5%9D%97%E9%93%BE%E8%AE%A4%E7%9F%A5%E7%9A%84%E8%AF%AF%E5%8C%BA%2F</url>
    <content type="text"><![CDATA[&emsp;新事物往往不是凭空而来，发展和演化也很少一蹴而就。认识新事物，首先要弄清楚它的来龙去脉，知其出身，方能知其所以然。此文章为《区块链技术指南》的读后笔记&amp;摘要。 账本科技的演化&emsp;区块链（Blockchain）的概念首次被人们关注，源于2009年初上线的比特币（Bitcoin）开源项目。从记账科技的演化角度来看，区块链实际上是记账问题发展到分布式场景下的天然结果。账本科技的演化过程大致可以分为四个阶段：简单账本、复式账本、数字化账本、分布式账本。简单账本很好理解，就是数据没有备份，容易出错且很难发现是否被篡改过。复式账本,简单理解就是，将每笔交易分别在来源方和目标方进行记录，且多方之间的账本总额应该时刻保持相等，这样就解决了单个账本的账本可信问题。数字化账本的记账方法相对于复式账本本身并没有太多创新，但由于数字媒介的出现，使得账本的规模、处理的速度、账本的复杂度都有了天翻地覆的提升，这是现在的电子商务、互联网金融的技术基础。复式账本虽然记录了交易的来龙去脉，不易出错，但本质上仍然是中心化模式，多方交易情况下如果某个或部分账本数据出现不一致，对账十分困难，分布式账本：由交易多方共同维护同一个共享的分布式账本，打通交易在不同阶段的来龙去脉，同时凭借分布式技术进一步提高记账的规模、效率、可靠性以及合规性。但在分布式场景下，如何避免参与方恶意篡改或者破坏记录？该由谁来决定每笔交易记录是否写入到账本中？这些问题一直都还在探索最佳实践。 分布式账本与区块链&emsp;为了防止有参与者对交易记录进行篡改，需要引入一定的验证机制。很自然地，我们想到了数字摘要技术，一个多方参与且都有权限读写的账本，每次当有新的交易记录被追加到账本上时，参与各方可以使用Hash算法对完整的交易历史计算数字摘要，获取当前交易历史的“指纹”。此后任意时刻，每个参与方都可以对交易历史重新计算数字摘要，一旦发现指纹不匹配，则说明交易记录被篡改过。同时，通过追踪指纹改变位置，可以定位到被篡改的交易记录：&emsp;上述方案，在实际应用中可以解决记录防篡改问题，但仍然存在较大缺陷。由于每次追加新的交易记录时需要从头对所有的历史数据计算数字摘要，当已存在大量交易历史时，数字摘要计算成本将变得很高，随着新交易的放生交易耗费将越来越大，系统扩展性很差。为了解决可扩展性的问题，需要进一步改进为方案二：主要到每次摘要已经确保了从头开始到摘要位置的完整历史，当新的交易发生后，实际上需要进行额外验证的只是新的交易，即增量部分。因此，计算摘要的过程可以改进为对旧的摘要值再加上新的交易内容进行验证。这样既解决了防篡改问题，又解决了可扩展性问题：&emsp;实际上，你可能已经注意到，方案二的账本结构正是一个区块链结构：&emsp;可见，从分布式记账的基本问题出发，可以自然推导出区块链结构，这也说明了在分布式场景下的记账问题中，区块链是一个简洁有效的天然答案。当然，区块链结构也并非解决分布式记账问题的唯一答案，实际上，除了简单的线性队列结构，也有人提出采用树或者图结构。 比特币的意义和价值&emsp;直到今天，关于比特币的话题仍充满了不少争议。但大部分人应该都会认可，比特币是数字货币历史上，甚至整个金融历史上一次了不起的社会学实验。&emsp;比特币首次真正从实践意义上实现了安全可靠的非中心化数字货币机制，这也是它受到无数金融科技从业者热捧的根本原因。作为一种概念货币，比特币主要是希望解决已有货币系统面临的几个核心问题： 被掌控在单一机构手中，容易被攻击。 自身的价值无法保证，容易出现波动。 无法匿名化交易，不够隐私。&emsp;要实现一套数字货币机制，最关键的还是要建立一套完善的交易记录系统，以及形成一套合理的货币发行机制。这个交易记录系统要能准确、公正地记录发生过的每一笔交易，并且无法被恶意篡改。对比已有的银行系统，可以看出，现有的银行机制作为金融交易的第三方中介机构，有代价地提供了交易记录服务。如果参与交易的多方都完全相信银行的记录（数据库），就不存在信任问题。可是如果是更大范围（甚至跨多家银行）进行流通的货币呢？哪家银行的系统能提供完全可靠不中断的服务呢？唯一可能的方案是一套分布式账本。这个账本可以被所有用户自由访问，而且任何个体都无法对所记录的数据进行恶意篡改和控制。为了实现这样一个前所未有的账本系统，比特币网络巧妙地设计了区块链结构，提供了可靠、无法被篡改的数字货币账本功能。&emsp;比特币网络中，货币的发行是通过比特币协议来规定的。货币总量受到控制，发行速度随时间自动进行调整。既然总量一定，那么单个比特币的价值会随着越来越多的经济实体认可比特币而水涨船高。发行速度的自动调整则避免出现通胀或者滞涨的情况。&emsp;另一方面，也要冷静地看到，作为社会学实验，比特币已经获得了某种成功，特别是基于区块链技术，已经出现了许多颇有价值的商业场景和创新技术。但这绝不意味着比特币自身必然能够进入到未来的商业体系中。比特币自身价值的波动十分剧烈；同时由于账目公开可查，通过分析仍有较大概率追踪到实际使用者；另外，比特币系统在不少管理环节上仍然依赖中心化的机制。 更有价值的区块链技术&emsp;如果说比特币是影响力巨大的社会学实验，那么从比特币核心设计中提炼出来的区块链技术，则让大家看到了塑造更高效、更安全的未来商业网络的可能。&emsp;2014 年开始，比特币背后的区块链技术开始逐渐受到大家关注，并进一步引发了分布式记账本（Distributed Ledger）技术的革新浪潮。&emsp;实际上，人们很早就意识到，记账相关的技术，对于资产（包括有形资产和无形资产）的管理（包括所有权和流通）十分关键；而多中心化的分布式记账本技术，对于当前开放、多维的商业模式意义重大。区块链的思想和结构，正是实现这种分布式记账本系统的一种极具可行潜力的技术。&emsp;区块链技术现在已经从比特币项目脱颖而出，在包括金融、贸易、征信、物联网、共享经济等诸多领域崭露头角。现在，除非特别指出是“比特币区块链”，否则当人们提到“区块链技术”时，往往已与比特币没有什么必然联系了。&emsp;商业行为的典型过程为：交易多方通过协商确定商业合约，通过执行合约完成交易。区块链擅长的正是如何在多方之间达成合约，并确保合约的顺利执行。根据类别和应用场景不同，区块链所体现的特点和价值也不同。从技术角度，一般认为，区块链具有如下特点： 分布式容错性：分布式账本网络极其鲁棒，能够容忍部分节点的异常状态； 不可篡改性：共识提交后的数据会一直存在，不可被销毁或修改； 隐私保护性：密码学保证了数据隐私，即便数据泄露，也无法解析。 随之带来的业务特性将可能包括： 可信任性：区块链技术可以提供天然可信的分布式账本平台，不需要额外第三方中介机构参与； 降低成本：跟传统技术相比，区块链技术可能通过自动化合约执行带来更快的交易，同时降低维护成本； 增强安全：区块链技术将有利于安全、可靠的审计管理和账目清算，减少犯罪风险。 &emsp;区块链并非凭空诞生的新技术，更是多种技术演化到一定程度后的产物，因此，其商业应用场景也跟促生其出现的环境息息相关。对于基于数字方式的交易行为，区块链技术能潜在地降低交易成本、加快交易速度，同时能提高安全性。我认为，能否最终提高生产力，将是一项技术能否被实践接受的关键。 区块链的定义与原理讨论区块链的定义可以从狭义和广义两个层面来看待。&emsp;狭义上，区块链是一种以区块为基本单位的链式数据结构，区块中利用数字摘要对之前的交易历史进行校验，适合分布式记账场景下防篡改和可扩展性的需求。&emsp;广义上，区块链还指代基于区块链结构实现的分布式记账技术，包括分布式共识、隐私与安全保护、点对点通信技术、网络协议、智能合约等。&emsp;区块链的基本原理理解起来并不复杂。首先来看三个基本概念： 交易（Transaction）：一次对账本的操作，导致账本状态的一次改变，如添加一条转账记录； 区块（Block）：记录一段时间内发生的所有交易和状态结果等，是对当前账本状态的一次共识； 链（Chain）：由区块按照发生顺序串联而成，是整个账本状态变化的日志记录。 &emsp;如果把区块链系统作为一个状态机，则每次交易意味着一次状态改变；生成的区块，就是参与者对其中交易导致状态改变结果的共识。区块链的目标是实现一个分布的数据记录账本，这个账本只允许添加、不允许删除。账本底层的基本结构是一个线性的链表。链表由一个个“区块”串联组成（如下图所示），后继区块中记录前导区块的哈希（Hash）值。某个区块（以及块里的交易）是否合法，可通过计算哈希值的方式进行快速检验。网络中节点可以提议添加一个新的区块，但必须经过共识机制来对区块达成确认。 认识上的误区目前，区块链自身仍是一种相对年轻的技术，不少人对它的认识还存在一些不足。下面总结了在探讨区块链技术时候一些常见的误区： 区块链核心在于比特币？虽说区块链的基本思想出现在比特币设计中，但发展到今日，加密货币和区块链已经俨然成为了两个不太相关的阵营。前者侧重从金融角度发掘比特币等代币的实验性意义；后者则从技术层面探讨和研究分布式账本科技可能带来的商业价值，试图拓展到更多的场景。 区块链是一种数据库技术 虽然区块链也可以用来存储数据，但它要解决的核心问题是多方的互信协作问题。单纯从存储数据角度，区块链效率可能不高，一般也不推荐把大量原始数据直接放到区块链系统上。当然，现有区块链系统中大量使用了数据库技术。也有企业尝试将区块链技术引入到分布式数据库领域，解决非中心化的管理，如 BigchainDB。 Token 就是数字货币？ 早在区块链概念出现之前，Token（令牌）就大量应用在计算机系统中，作为带有某种权限的证明，它可以协助系统应用进行快速协作。因此，在区块链系统中使用 Token 可能在某些应用场景（如游戏积分）下提供管理便利。而数字货币则强调经济价值，跟其在系统中的原生功能无必然联系。 区块链是万能的，是颠覆性的？ 作为融合多项已有技术而出现的事物，区块链跟现有技术体系是一脉相承的。它在解决多方合作和可信处理上向前多走了一步，但并不意味着它解决了所有问题，更不会快速颠覆大量的商业模式。很长一段时间里，区块链最适用的场景仍需不断摸索，区块链也会跟已有系统共存使用。 区块链必然是非中心化的？非中心化的一定优于中心化设计？讨论技术的优劣必须要有场景前提，区块链也是如此。并不存在某种区块链技术能在任意场景下都优于其它方案，这也是为何目前公开链和联盟链在技术选型上存在较大差异。中心化设计具有设计简单，管理完善，性能可控的特点，但往往容错性能比较差；非中心化（多中心化）的设计可以提高容错性能，利用多方共识来降低篡改风险，但意味着设计较复杂，要付出性能代价。实际上，根据实际场景的需求，现有大部分区块链技术都介于绝对的中心化和绝对的非中心化之间，以取得不同指标上的平衡。例如公开链为了提高性能通过选择部分信任的节点来作为代表。]]></content>
  </entry>
  <entry>
    <title><![CDATA[Unix/Linux文件类型与权限管理]]></title>
    <url>%2F2019%2F01%2F27%2FUnix%3ALinux%E6%96%87%E4%BB%B6%E7%B1%BB%E5%9E%8B%E4%B8%8E%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86%2F</url>
    <content type="text"><![CDATA[&emsp;在小白与计算机的日常中，经常会碰到文件无（读、写、执行）权限，包括很多刚入门的程序员，也常常在别人的博客里会看到类似 777 XX.file```、```chmod u+x XX.file```、```chmod g-w XX.file```这些不明觉厉的命令，今天来帮还不清楚的童鞋科普一下，电脑中每个文件的权限 系统究竟是如何管理的，又如何修改文件的权限。 12### 看懂文件类型与权限等信息&amp;emsp;先不慌，打开终端，在任意非空目录下我们输入： ls -l1234567891011终端会输出该目录下所有文件的信息：![](https://user-gold-cdn.xitu.io/2019/1/23/16878e2679f7e8f8?w=1210&amp;h=174&amp;f=png&amp;s=49942)好，我们来对每一列是什么分别介绍：1. -r-xr-xr-x：文件类型及权限信息 我们会发现任意一个文件第一列都是一个由 - d l p s b c D r w x + @ 这些字符组成的字符串，这一串字符究竟是由哪几部分组成又分别代表什么呢？ * 第一位字符：文件类型信息，-代表这是一个常规文件--Regular file，d代表这是一个文件夹--Directory，l代表文件链接--Symbolic link，更多文件类型（p-Named pipe、s-Socket、b/c-Device file、D-Door）请参考[Unix file types]((https://en.wikipedia.org/wiki/Unix_file_types)) * 第2-10位，这九位字符每三个为一组，每组的三个字符分别代表读(r)、写(w)、执行(x)权限，三组分别代表不同所有者对该文件的权限，第一组：文件所有者的权限、第二组：这一组其他用户的权限、第三组：非本组用户的权限，总结如下图：![](https://user-gold-cdn.xitu.io/2019/1/23/16878dd01879f1d6?w=2142&amp;h=796&amp;f=png&amp;s=455829) * 在MacOS系统中，输入```ls -l``` 发现文件权限格式与Linux稍有不同，部分文件权限信息的末尾有”+“或”@“符号：![](https://user-gold-cdn.xitu.io/2019/1/23/16878df88b3644fa?w=1110&amp;h=266&amp;f=png&amp;s=70168)我们直接看官方说明：终端输入```man ls```，我们可以看到这一段说明： If the file or directory has extended attributes, the permissions field printed by the -l option is followed by a &apos;@&apos; character. Otherwise, if the file or directory has extended security information (such as an access control list), the permissions field printed by the -l option is followed by a &apos;+&apos; character. 那什么是“extended security”呢？其实就是扩展安全信息 执行ls -le查看extended security: ![](https://user-gold-cdn.xitu.io/2019/1/23/16879719bf49f408?w=1506&amp;h=380&amp;f=png&amp;s=91760) 你会发现权限末尾有&#39;+&#39;的都会有0: group:everyone deny delete`，意义就很明显啦~ 那什么又是“extended attributes”呢？继续查看“@”的含义，执行 ls -l@或xattr -l XX.file 查看扩展属性：简单理解@就是表示文件或目录有额外属性，比如在MacOS上 从网上下载个文件有时会提示“此文件来自网络下载不安全”，就是这个属性起的作用。而从MacOS下copy文件到Linux系统上时也会因为这个属性出现打不开的情况。可以手动去除掉：xattr -c XX.file。 其余每一列对应的信息如下：[类型+权限]—[连接]-[所有者]-[所属组]-[文件大小]-[最后修改日期]-[文件名称] 文件权限的修改：一张图看懂修改文件权限的命令：通过按位与的设计巧妙的用三个二进制位表示了三种权限产生的8种组合。用符号改变权限时，如：chmod a+r XX.file表示对用户、组、其他 全部添加读取权限。 以上，有任何疑问欢迎留言~]]></content>
  </entry>
  <entry>
    <title><![CDATA[撸一个 iOS 重签名脚本]]></title>
    <url>%2F2019%2F01%2F23%2F%E6%92%B8%E4%B8%80%E4%B8%AAiOS%E9%87%8D%E7%AD%BE%E5%90%8D%E8%84%9A%E6%9C%AC%2F</url>
    <content type="text"><![CDATA[上一篇iOS APP签名详解我们了解了iOS签名的机制和原理，这一篇我们一起来动手写一个自动重签名的脚本，懒是程序员乃至人类进步的终极力量，造轮子写工具可以极大的避免重复性工作，为我们节省更多的时间放在思考上，话不多说撸起袖子开始干： 第一步：获取脱壳的ipa包 从iTunes 12.6.3及以前的版本上直接下载 （macOS Mojave Doesn’t Support），这样获取到的是正版ipa，需要用Clutch、dumdecrypted等工具先脱壳，否则别人的加密验证不通过无法安装 各类助手上下载越狱版ipa包 越狱手机导出 Xcode打包 等等 这里我下载了微信的越狱版ipa包用来演示。 第二步：命令行实现重签名 将ipa解压缩后前往.app所在目录，输入 -d -vv WeChat.app``` 1234567891011121314151617181920212223 查看可执行文件的签名信息：![](https://user-gold-cdn.xitu.io/2019/1/22/1687194244bf3be8?w=1424&amp;h=376&amp;f=png&amp;s=245630)可以看到签名信息现在还是腾讯的 2. 输入： ```security find-identity -v -p codesigning``` 查看Mac本地的证书列表:![](https://user-gold-cdn.xitu.io/2019/1/22/16871950dcd0e283?w=1592&amp;h=272&amp;f=png&amp;s=114415) 记下你要用来签名的证书双引号（包括双引号）中的字符串，一会儿会用到 3. 确认ipa包是否已经脱壳，输入： ```cd WeChat.app``` ```otool -l WeChat | grep crypt``` 会输出：![](https://user-gold-cdn.xitu.io/2019/1/22/16871958f396421c?w=988&amp;h=244&amp;f=png&amp;s=94527) cryptid为0即为已脱壳，为1为加密状态。这里有两组数据是因为这是个支持两种CPU架构的可执行文件，可输入```file WeChat```查看可执行文件支持的架构：![](https://user-gold-cdn.xitu.io/2019/1/22/16871961777d44a5?w=1396&amp;h=142&amp;f=png&amp;s=108757)4. 删除无法签名的插件文件：PlugIns文件夹、Watch文件夹 5. 对.app文件夹内的Frameworks文件夹中的每一个framework强制重签名： ```codesign -fs 步骤2中记下的证书信息 要签名的.framework``` 注意不要遗漏，每一个framework都要用自己的证书重签一下6. 将自己的描述文件名改为embedded.mobileprovision，并拖入到.app中，再将.app中info.plist文件里的Bundle identifier改成我们自己的BundleID7. 在.app同级目录下新建一个entitlements.plist文件，查看描述文件内容： ```security cms -D -i embedded.mobileprovision```将Entitlements节点下的 ... ... 12345 复制粘贴到刚刚新建的entitlements.plist文件中8. 最后一步，对整个包签名，回到.app所在目录，输入： ```codesign -fs 步骤2中记下的证书信息 --no-strict --entitlements=entitlements.plist WeChat.app``` 签名成功！9. 打包：```zip -ry WeiChat.ipa Payload 以上，就是通过命令行一步步的实现应用重签名。 最后：撸自动重签名的脚本现在我就按照这个思路写脚本：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657#$&#123;SRCROOT&#125; 它是工程文件所在的目录TEMP_PATH=&quot;$&#123;SRCROOT&#125;/Temp&quot;#资源文件夹，我们提前在工程目录下新建一个APP文件夹，里面放ipa包ASSETS_PATH=&quot;$&#123;SRCROOT&#125;/APP&quot;#目标ipa包路径TARGET_IPA_PATH=&quot;$&#123;ASSETS_PATH&#125;/*.ipa&quot;#清空Temp文件夹rm -rf &quot;$&#123;SRCROOT&#125;/Temp&quot;mkdir -p &quot;$&#123;SRCROOT&#125;/Temp&quot;#----------------------------------------# 1. 解压IPA到Temp下unzip -oqq &quot;$TARGET_IPA_PATH&quot; -d &quot;$TEMP_PATH&quot;# 拿到解压的临时的APP的路径TEMP_APP_PATH=$(set -- &quot;$TEMP_PATH/Payload/&quot;*.app;echo &quot;$1&quot;)# echo &quot;路径是:$TEMP_APP_PATH&quot;#----------------------------------------# 2. 将解压出来的.app拷贝进入工程下# BUILT_PRODUCTS_DIR 工程生成的APP包的路径# TARGET_NAME target名称TARGET_APP_PATH=&quot;$BUILT_PRODUCTS_DIR/$TARGET_NAME.app&quot;echo &quot;app路径:$TARGET_APP_PATH&quot;rm -rf &quot;$TARGET_APP_PATH&quot;mkdir -p &quot;$TARGET_APP_PATH&quot;cp -rf &quot;$TEMP_APP_PATH/&quot; &quot;$TARGET_APP_PATH&quot;#----------------------------------------# 3. 删除extension和WatchAPP.个人证书没法签名Extentionrm -rf &quot;$TARGET_APP_PATH/PlugIns&quot;rm -rf &quot;$TARGET_APP_PATH/Watch&quot;#----------------------------------------# 4. 更新info.plist文件 CFBundleIdentifier# 设置:&quot;Set : KEY Value&quot; &quot;目标文件路径&quot;/usr/libexec/PlistBuddy -c &quot;Set :CFBundleIdentifier $PRODUCT_BUNDLE_IDENTIFIER&quot; &quot;$TARGET_APP_PATH/Info.plist&quot;#----------------------------------------# 5. 给MachO文件上执行权限# 拿到MachO文件的路径APP_BINARY=`plutil -convert xml1 -o - $TARGET_APP_PATH/Info.plist|grep -A1 Exec|tail -n1|cut -f2 -d\&gt;|cut -f1 -d\&lt;`#上可执行权限chmod +x &quot;$TARGET_APP_PATH/$APP_BINARY&quot;#----------------------------------------# 6. 重签名第三方 FrameWorksTARGET_APP_FRAMEWORKS_PATH=&quot;$TARGET_APP_PATH/Frameworks&quot;if [ -d &quot;$TARGET_APP_FRAMEWORKS_PATH&quot; ];thenfor FRAMEWORK in &quot;$TARGET_APP_FRAMEWORKS_PATH/&quot;*do#签名/usr/bin/codesign --force --sign &quot;$EXPANDED_CODE_SIGN_IDENTITY&quot; &quot;$FRAMEWORK&quot;donefi 将写好的脚本直接丢到.xcodeproj同级目录中 Xcode –&gt; Build Phases –&gt; New Run Script Phase: 现在，将你要重签名的ipa包丢到在工程目录下新建的文件夹APP中（这个文件夹跟你写的脚本中的目标文件夹同名即可），直接Run！任何应用都会在你的真机上跑起来了！这也是后面讲逆向的准备工作。 了解了iOS签名的原理再做重签名，我相信上面的每一步为什么那么做，你自然也很清楚了，写起脚本来自然思路也很清晰~如果你在实践中遇到任何问题，欢迎留言交流~]]></content>
  </entry>
  <entry>
    <title><![CDATA[iOS APP签名机制详解]]></title>
    <url>%2F2019%2F01%2F18%2FiOS%20APP%E7%AD%BE%E5%90%8D%E6%9C%BA%E5%88%B6%E8%AF%A6%E8%A7%A3%2F</url>
    <content type="text"><![CDATA[苹果的需求 为了保证系统的安全性，所有iPhone上安装的应用必须是经过苹果授权的 安装包不需要上传到App Store也能被安装 （开发调试 企业灰度） 防止证书权限滥用：设备限制、指定APP、iCloud/PUSH/后台运行等附加权限控制 苹果的解决方案：双层代码签名+描述文件: 这里画一张图附上： &emsp;在iOS出来之前，主流的操作系统（MacOS/Windows）软件随便从哪里下载都能运行，系统安全存在隐患，盗版软件、病毒入侵、静默安装等等，苹果希望解决类似的问题，保证在iPhone iOS上的APP都是经过苹果官方允许的，怎样保证呢？就是通过代码签名。 &emsp;如果要实现验证，最简单的方式就是苹果官方生成一对RSA公私钥，在iOS系统中内置一个公钥，私钥由苹果后台保存，我们上传APP到App Store时苹果后台用私钥对APP数据进行加密，iPhone下载APP后用公钥验证这个签名就可以确认APP是否经过允许或被三方篡改过。但是，我们安装APP并不仅仅只有App Store这一个方式，比如真机调试、企业包等，所以只靠这个简单的数字签名方式是不够的。 &emsp;于是苹果设计了双层签名的机制，我们都知道iOS的应用开发必须在Mac系统下进行，正是由于这个依赖关系，双层签名才有了基础： 在Mac系统中生成一对非对称加密算法的公私钥M（Xcode会帮你做好） 苹果自己有固定的一对公私钥，正如上述最简单的代码签名中提到的：私钥A在苹果后台，公钥A在每个iOS系统的手机中 把公钥M以及一些开发者信息（也就是CSR文件）发送给苹果后台，用苹果后台的私钥A对公钥M签名，得到一份包含公钥M以及其签名结果的数据就是证书（.p12）。 在开发时，当我们打包时会用本地的私钥M（也就是可导出给小伙伴的开发者证书）对这个APP进行签名，同时把第三步得到的证书一起打包进APP里，然后安装到手机上（真机联调）或者提交App Store审核 安装时，iOS系统取得内置公钥A去验证公钥M的数字签名证书是否正确 验证公钥M是苹果认证过的后，再用公钥M去验证APP的签名，这样就间接验证了这个APP的安装是经过苹果允许的了（注意这里只验证安装行为，不验证APP是否被改动，因为开发阶段APP内容总是不断变化的） &emsp;有了上面的过程已经可以保证开发者的认证和程序的安全了，但是如果只有上述的过程，那岂不是只要申请了一个证书就可以安装到所有的iOS设备了？所以，苹果又增加了授权文件（Provisioning profile）的验证，Provisioning profile一般包括三样东西：证书、APP ID、设备。 &emsp;描述文件是在AppleDevelop网站创建的(在Xcode中填上AppleID它会代办创建)，Xcode运行时会打包进入APP内。在开发时，编译完一个 APP 后，用本地的私钥M对这个APP进行签名，同时把从苹果服务器得到的 Provisioning Profile 文件打包进APP里，文件名为embedded.mobileprovision，当把APP安装到手机上时，iOS系统会进行验证。 &emsp;以上就是iOS应用签名的原理，下一篇基于这个原理我会手撸一个自动重签名的脚本。]]></content>
  </entry>
  <entry>
    <title><![CDATA[浅谈iOS中常用加密算法的使用]]></title>
    <url>%2F2019%2F01%2F12%2F%E6%B5%85%E8%B0%88iOS%E4%B8%AD%E5%B8%B8%E7%94%A8%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95%E7%9A%84%E4%BD%BF%E7%94%A8%2F</url>
    <content type="text"><![CDATA[&emsp;以前如果我们忘记了登录密码，通常可以通过“找回密码”这样的方式拿回密码，那说明你的隐私数据在他们的数据库中是明文保存的，现在请切记：如果哪个平台还有这样的方式请立刻马上注销你的账号，并避免在任何其他平台使用这个平台使用过的密码。请坚信：在网络世界中，只要是明文存在或可逆的东西，都是不安全的。没有哪家公司会告诉你他们的数据库被拖库过，你更无法想象现在的黑色产业早已让你毫无隐私。 &emsp;千万别一个密码走天下，一定要定期改密码！ &emsp;道高一尺魔高一丈，对用户隐私及一些敏感数据的保护越来越重要，在iOS中，苹果封装了Security.framework、CommonCrypto.framework这两个保护信息安全的库，为我们提供了安全相关的通用API： RSA：公私钥的生成、公钥加密、私钥解密、私钥签名、公钥验签功能，证书信息的读取，以及密钥在KeyChain中存储，查找，删除等功能 哈希：SHA1、SHA224、SHA256、SHA384、SHA512MD2、MD4、MD5 对称加密：DES、3DES、AES &emsp;这一篇文章，我们就以“用户输入密码，登录，服务端验证用户信息，用户上传隐私数据”这个常见场景为例，分享一些密码学常识和加密时常用的防破解技巧，至于上述算法相关API的使用，文末我会附上iOS中所有常用加密API使用的demo，这里就不浪费篇幅贴代码了。先说两个保护用户隐私的原则： 网络上不允许明文传递用户隐私信息 本地不允许明文保存用户隐私信息 &emsp;再了解下几种算法的特点： 对称加密 加密解密共用一个密钥 DES 数据加密标准，安全强度不够已经很少用了 3DES 使用三个密钥对相同的数据执行三次加密 强度略高，但密钥的保护一直是个隐患所以也不常用 AES 高级密码标准 用得最多 两种常用加密模式： ECB：&emsp;最基本的加密方式，无初始向量，相同的明文永远生成不变的密文，容易受到密码本重放攻击，很少用 CBC：&emsp;明文被加密前要与前面的密文进行异或运算后再加密，因此只要选择不同的初始向量，相同的密文加密后会形成不同的密文，这是目前应用最广泛的模式。CBC加密后的密文是上下文相关的，但明文的错误不会传递到后续分组，但如果一个分组丢失，后面的分组将全部作废(同步错误)。&emsp;可以有效的保证密文的完整性，如果一个数据块在传递是丢失或改变，后面的数据将无法正常解密。 RSA关于RSA相关知识请参考：非对称加密–RSA原理浅析RSA的主场-证书签名之OpenSSL演示 这里不再赘述。 哈希算法也就是常说的散列函数，严格意义上它并不是一种加密算法，但它常常与加密算法一起出现，作为一种组合方式。哈希具有以下特点： 算法是公开的 对相同的数据运算，得到的结果是一样的 同一算法对不同的数据运算，得到的结果长度是固定的，如MD5的结果一定是128bit，32个字符(16进制表示)，所以散列碰撞是必然的偶然 不可逆，但是可以通过彩虹表去反查询 通常作为信息“指纹”–信息摘要，用来做数据识别（版权、搜索引擎、数字签名等）。 实际应用&emsp;知道了每种算法的特点，回到应用场景：用户输完密码点击登录时，我们如何保证用户信息是足够安全的呢？ 对称加密：密钥传输有隐患，且在客户端加密前和服务端解密后会出现明文，不安全。 RSA：安全性高，网络劫持很难破解，但是服务端拿到客户端加密后的密文怎么办呢？用私钥解密，解密之后拿到明文信息？大忌，没有哪个服务端是安全的，更没法保证数据库人员的个人泄露用户信息。不可取。 哈希： 直接MD5？用户输入常规组合概率很大，暴力破解风险很高，不可取。本地加盐，很变态的盐？安全性有一定保障，缺点是盐写死在程序里了，写代码的人也有泄露的可能性，一旦泄漏结果是毁灭性的，不可取。 HMAC：Keyed-Hashing for Message Authentication，这是一种使用单向散列函数来构造消息认证码的方案，而不是算法。&emsp; 在第一次注册时，服务端下发一个随机密钥 n，这个密钥会在客户端和服务端都保存一份（支持服务端更新），客户端的 n 用作以后每次登录时的“盐”参与第一次散列运算，并将第一次散列运算的结果 s 发给服务端作为用户密码信息保存到数据库中，这样用户的真实密码无论是客户端还是服务端都不知道，也不存在数据库被拖库泄露的问题。服务端保存的 n 用于当用户换设备登录或卸载重新装时验证通过后再次将 n 下发给客户端保存。&emsp;用户每次登录时，服务器会再动态下发一个随机值作为密钥，并在会话中记下这个随机值 r，客户端先用本地保存的 n 对用户密码做散列运算得到 s ，再用 r 对 s 做一次MAC（Message Authentication Codes）运算并将运算结果发送给服务端，服务端也从数据库中取出用户的密码散列值做同样的运算，并将结果与客户端进行对比。为了防止网络中间人攻击，还需将时间戳（服务器时间，一般精确到分钟）参与校验，黑客就很难破解了。这是目前最主流的安全方案。 &emsp;现在用户登录成功，现在要上传一份敏感数据，我们如何保证数据的完整性呢？结合上面的分析，推荐AES的CBC加密方式，安全性高，还能保证完整性，数字签名同样也可以验证数据完整性，用RSA对数据的hash值进行加密，服务端接收完数据后，用私钥解密得到hash值，与接收数据的hash值作比对。 补充：iOS中常见加密算法的使用：EncryptDemo在Demo中，对称加密AES的加密解密函数： CCCryptorStatus CCCrypt( CCOperation op, /* kCCEncrypt, etc. */ CCAlgorithm alg, /* kCCAlgorithmAES128, etc. */ CCOptions options, /* kCCOptionPKCS7Padding, etc. */ const void *key, size_t keyLength, const void *iv, /* optional initialization vector */ const void *dataIn, /* optional per op and alg */ size_t dataInLength, void *dataOut, /* data RETURNED here */ size_t dataOutAvailable, size_t *dataOutMoved) API_AVAILABLE(macos(10.4), ios(2.0)); 调用CCCrypt时，用户敏感数据不要直接作为参数传递，否则逆向很容易hook到，通常的做法是对敏感数据做异或、加盐等处理，具体根据需要自己设计。 iOS app签名机制详解 推荐阅读：iOS应用签名(上)iOS应用签名(下) iOS中对钥匙串的操作推荐：SSKeyChain 实践出真知，下篇再会~老规矩，有错误请积极指正，有问题请踊跃留言。 更多一手好文更新，请关注我的个人微信公众号：面向未来编程]]></content>
  </entry>
  <entry>
    <title><![CDATA[RSA的主场-证书签名&OpenSSL演示]]></title>
    <url>%2F2019%2F01%2F09%2FRSA%E7%9A%84%E4%B8%BB%E5%9C%BA-%E8%AF%81%E4%B9%A6%E7%AD%BE%E5%90%8D%26OpenSSL%E6%BC%94%E7%A4%BA%2F</url>
    <content type="text"><![CDATA[&emsp;在上一篇非对称加密–RSA原理浅析中，我们了解了RSA加密的数学原理，RSA的安全性目前虽然得到公认，但它同样也有缺点：加密速度慢、性能较低，不适合对大文件直接做加密，需要加密的原始数据通常会先经过Base64、Hash、对称加密等处理后，再用RSA对其进行加密，因此RSA最主要的应用场景，是数字签名–对数据做身份/合法性校验。&emsp;权威的证书颁发机构–躺着赚钱的CA，就是用的RSA这一套算法，这一篇我们一起用命令行来逐步拆解证书的生成过程，揭开证书背后的秘密。Talk is cheap，show you the code，Come on！ 什么是OpenSSL&emsp;SSL大家都不陌生，我们访问网站的时候，以HTTPS开头的表示你和服务器之间传输的数据经过了加密，这里所使用的加密协议就是SSL（Secure Sockets Layer，后来又推出了它的后续版本，改名叫TLS）。也就是说，把HTTP协议经过一层SSL协议进行加密包装，就变成了HTTPS。当然，SSL/TLS还用在很多协议中，例如VPN、加密的电子邮件协议等。&emsp;那OpenSSL是啥？在SSL协议中，我们使用了很多密码学手段来保护数据，其中包括对称密码、公钥密码、数字签名、证书、完整性校验、伪随机数生成等。由于这些算法和操作都非常复杂，于是开源社区就开发了一套库，这个库里面提供了很多现成的标准方法，其他开发者只要用正确调用这些方法，就可以实现SSL协议中的各种加密/解密操作了。因此，OpenSSL是一套开源的密码学工具包（open source cryptography toolkit）。情理之中的，OpenSSL也支持了RSA算法，接下来我们就用OpenSSL在macOS的终端上为大家演示证书签名的每一个步骤。 RSA加密、证书生成终端演示&emsp;为了便于观察，请开辟并前往一个空文件夹下开始你的表演~输入：12345openssl genrsa -out private.pem 2048``` 此时目录中出现一个private.pem文件，这个文件包含了私钥信息 根据私钥生成公钥 输入： openssl rsa -in private.pem -pubout -out public.pem1分别查看文件中的内容： cat private.pem1234```cat public.pem``` 你会得到这样类似这样的结果： —–BEGIN RSA PRIVATE KEY—–Base64编码的内容—–END RSA PRIVATE KEY—–123456```-----BEGIN PUBLIC KEY-----Base64编码的内容-----END PUBLIC KEY-----``` 现在我们随便写一个txt文件作为要加密的数据： echo “hello word!“ &gt; message.txt1用公钥对其加密： openssl rsautl -encrypt -in message.txt -inkey public.pem -pubin -out enc.txt12查看加密后的文件：```cat enc.txt```，你只能看到一堆乱码 用私钥对加密文件解密： openssl rsautl -decrypt -in enc.txt -inkey private.pem -out dec.txt123查看解密结果：```cat dec.txt```，与你的message.txt内容完美吻合~ 上面的过程反过来（私钥加密 公钥解密）一个道理，但执行命令有点区别： 用私钥对其加密： openssl rsautl -sign -in message.txt -inkey private.pem -out enc.bat1用公钥对加密文件解密： openssl rsautl -verify -in enc.bat -inkey public.pem -pubin -out dec.txt1&amp;emsp;至此，我们已经完成了RSA加密解密的操作，那我们开发中用的证书跟它们有什么关系呢？做iOS开发的都用钥匙串从CA请求过csr文件，其实就是根据当前Mac内置的私钥（当然你也可以自己指定私钥）生成对应的公钥，生成的csr文件包含了公钥证书原始文件+你的服务器信息和单位等信息。我们来用命令执行这一步操作： openssl req -new -key private.pem -out rsacert.csr1根据提示依次输入下列信息并回车: Country Name (2 letter code) []:State or Province Name (full name) []:Locality Name (eg, city) []:Organization Name (eg, company) []:Organizational Unit Name (eg, section) []:Common Name (eg, fully qualified host name) []:Email Address []:A challenge password []:1拿到带着公钥信息的csr文件之后，下一步就是交给CA认证中心进行签名，也就是让CA盖个章（一个章一年五千大洋@_@，如果你的https用自签的证书那别人访问时有不安全提示就是因为你没有CA盖的这个章，不被承认是安全的）： openssl x509 -req -days 3650 -in rsacert.csr -signkey private.pem -out rsacert.crt1这时得到的crt文件是Base64编码的，我们需要转成DER二进制格式的证书才能直接使用： openssl x509 -outform der -in rsacert.crt -out rsacert.der123这个rsacert.der文件就是包含了我们公钥信息的证书！ ![](https://user-gold-cdn.xitu.io/2019/1/9/16832dfe1997dfd0?w=1022&amp;h=826&amp;f=png&amp;s=172453)最后一步，导出公钥证书对应的私钥证书： openssl pkcs12 -export -out p.p12 -inkey private.pem -in rsacert.crt12345![](https://user-gold-cdn.xitu.io/2019/1/9/16832e25c325de5f?w=1004&amp;h=816&amp;f=png&amp;s=165762)输入两次私钥证书的密码就得到了我们最熟悉的.p12文件。 &amp;emsp;当然，在我们实际开发中不会同时拿到这两个证书，这里只是给大家演示它们之间的关系，后面我会对苹果的双向验证(双层签名)原理专门写一篇文章讲解 ### 补充&amp;emsp;关于.pem文件内部的数据结构可以通过命令 openssl rsa -in private.pem -text -out ptivate.txt`查看，ptivate.txt文件中每一项的具体意义请参考（PEM格式）解析&emsp;在上面的命令中如果有些不明觉厉的玩意儿，那多半是你对证书相关的文件编码格式、协议和扩展名不太熟悉，不要慌，我已经为你准备好了加餐。 高能预警——证书文件编码格式、扩展名、协议科普&emsp;我们统一采用X.509的格式标准生成证书，接触过证书的同学看到：pem、der、pfx、jks、kdb、cer、key、csr、crt、crl、ocsp、scep等这些字眼一定不会完全陌生，这些东东究竟是个啥？赶紧来一探究竟，有描述不准确的地方还望指正： 编码格式 DER：（Distinguished Encoding Rules）的缩写，它是大多数浏览器的缺省格式，并按 ASN1 DER 格式存储，它是无报头的。可包含所有私钥、公钥和证书。 PEM：（Privacy Enhanced Mail）的缩写，它是OpenSSL默认采用的信息存放方式，它存储用Base64编码的DER格式数据，用ASCII报头包围，因此适合系统之间的文本模式传输。可以包括所有私钥、公钥和证书。 文件扩展名 .pem - (隐私增强型电子邮件) DER编码的证书再进行Base64编码的数据存放在”—–BEGIN CERTIFICATE—–”和”—–END CERTIFICATE—–”之中 .cer, .crt, .der - 通常是DER二进制格式的证书，但Base64编码后也很常见 .p7b, .p7c - PKCS#7 SignedData structure without data, just certificate(s) or CRL(s)，加密消息语法(pkcs7),是各种消息存放的格式标准。这些消息包括:数据、签名数据、数字信封、签名数字信封、摘要数据和加密数据。 .p12 - PKCS#12格式，包含证书的同时可能还有带密码保护的私钥 .pfx - PFX，PKCS#12之前的格式（通常用PKCS#12格式，比如那些由IIS产生的PFX文件） .jks - 通常可以将Apache/OpenSSL使用的“.key文件 + .crt文件”格式转换为标准的Java Key Store(JKS)文件。JKS文件格式被广泛的应用在基于JAVA的WEB服务器、应用服务器、中间件。你可以将JKS文件导入到TOMCAT、WEBLOGIC 等软件 .kdb - 通常可以将Apache/OpenSSL使用的“.key文件 + .crt文件”格式转换为标准的IBM KDB文件。KDB文件格式被广泛的应用在IBM的WEB服务器、应用服务器、中间件。你可以将KDB文件导入到IBM HTTP Server、IBM Websphere 等软件 .csr - 证书请求文件(Certificate Signing Request)。生成X509数字证书前,一般先由用户提交证书申请文件,然后由 CA 来签发证书。 .key - 一般指PEM格式的私钥文件，也可能是DER格式的 .crl - 证书吊销列表 (Certification Revocation List)是一种包含撤销的证书列表的签名数据结构。CRL是证书撤销状态的公布形式,CRL 就像信用卡的黑名单,用于公布某些数字证书不再有效。CRL是一种离线的证书状态信息。它以一定的周期进行更新。CRL可以分为完全CRL和增量CRL。在完全CRL中包含了所有的被撤销证书信息,增量CRL由一系列的CRL来表明被撤销的证书信息,它每次发布的CRL是对前面发布CRL的增量扩充。基本的CRL信息有:被撤销证书序列号、撤销时间、撤销原因、签名者以及 CRL 签名等信息。基于CRL的验证是一种不严格的证书认证。CRL能证明在CRL中被撤销的证书是无效的。但是,它不能给出不在CRL中的证书的状态。如果执行严格的认证,需要采用在线方式进行认证,即OCSP认证。一般是由CA签名的一组电子文档，包括了被废除证书的唯一标识（证书序列号），CRL用来列出已经过期或废除的数字证书。它每隔一段时间就会更新，因此必须定期下载该清单，才会取得最新信息 协议 OCSP – 在线证书状态协议(Online Certificate Status Protocol,rfc2560)，用于实时表明证书状态。OCSP 客户端通过查询 OCSP 服务来确定一个证书的状态,可以提供给使用者一个或多个数字证书的有效性资料，它建立一个可实时响应的机制，让用户可以实时确认每一张证书的有效性，解决由CRL引发的安全问题。。OCSP 可以通过 HTTP协议来实现。rfc2560 定义了 OCSP 客户端和服务端的消息格式 SCEP － 简单证书注册协议（Simple Certificate Enrollment Protocol），基于文件的证书登记方式需要从您的本地计算机将文本文件复制和粘贴到证书发布中心，和从证书发布中心复制和粘贴到您的本地计算机。SCEP可以自动处理这个过程但是CRLs仍然需要手动的在本地计算机和CA发布中心之间进行复制和粘贴 实践出真知，下篇再会~ 老规矩，有问题请踊跃留言。更多一手好文更新请关注我的个人微信公众号：面向未来编程]]></content>
  </entry>
  <entry>
    <title><![CDATA[非对称加密--RSA原理浅析]]></title>
    <url>%2F2019%2F01%2F07%2F%E9%9D%9E%E5%AF%B9%E7%A7%B0%E5%8A%A0%E5%AF%86--RSA%E5%8E%9F%E7%90%86%E6%B5%85%E6%9E%90%2F</url>
    <content type="text"><![CDATA[来龙去脉&emsp;在1976年以前，所有的加密方法都是同一种模式：加密、解密使用同一种算法。在交互数据的时候，彼此通信的双方就必须将规则告诉对方，否则没法解密。这种加密与解密使用同一规则的加密方式被称为对称加密算法。那么加密和解密的规则（简称密钥）的保护就显得尤其重要，传递密钥的风险也一直是个隐患。&emsp;直到1976年，两位美国计算机学家：迪菲（W.Diffie）、赫尔曼（M.Hellman）提出了一种崭新构思，可以在不直接传递密钥的情况下完成密钥交换，开创了密码学研究的新方向。这就是“迪菲赫尔曼密钥交换”算法，其仍然是一种对称加密算法，只是密钥不再需要传递。交换原理如下图所示：其中a，b是在通信两端本地的随机数，g是模p的一个原根，K是交换后产生的密钥，安全性来源于当p非常大时，已知g，p，A，B很难反算出a，b。离散对数问题是该算法的基础。&emsp;1977年，三位麻省理工学院的数学家 罗纳德·李维斯特（Ron Rivest）、阿迪·萨莫尔（Adi Shamir）和伦纳德·阿德曼（Leonard Adleman）一起设计了一种算法，可以实现非对称加密。这就是用他们三个人的名字命名的算法–RSA算法。&emsp;要弄清楚RSA的加密原理，先要知道欧拉定理)： 对于两个互质的正整数m、n，m^φ(n) mod n ≡ 1当m&lt;n时不难推导出：m^(k*φ(n)) mod n ≡ 1进一步得到：m^(k*φ(n)+1) mod n ≡ m 基于此还需要理解一个概念，模反元素： 如果两个正整数e和x互质，那么一定可以找到整数d，使得 e*d-1 被x整除。那么d就是e对于x的“模反元素”即ed mod x ≡ 1等同于 e\d ≡ k*x + 1，k为正整数 敲黑板！！！关键来了，上面两个转换的结果一碰撞，Duang！就碰出了我们RSA的核心算法： 当e与φ(n)互质时，m^(e*d) mod n ≡ m 鸡不鸡冻，开不开森！还有点迷糊？没关系，来继续： 假设我们对m进行加密传输加密：m^e mod n = c，解密：c^d mod n = m^(e*d) mod n = m 上述过程中，n+e就是RSA中的公钥，n+d就是RSA中的私钥，c是加密后的密文。 补充： n会非常大，长度一般为1024个二进制位，现在稳妥一点的长度为2048个二进制位。（目前人类已经分解的最大整数，232个十进制位，768个二进制位） 因为需要求出φ(n)，所以根据欧拉函数特点，最简单得到n的方式是由两个质数相乘: 质数：p1、p2Φ(n) = (p1 - 1) * (p2 - 1) 最终由φ(n)得到 e 和 d 总共生成6个数字：p1、p2、n、φ(n)、e、d 关于RSA的安全：除了公钥用到了n和e 其余的4个数字是不公开的。目前破解RSA得到私钥d的思路如下： 由于e*d = φ(n)*k + 1。e是公开的，那必须要知道φ(n) 要得到φ(n)，必须知道p1 和 p2 由于 n = p1 * p2，所以只有将n因数分解才能算出p1 p2 量子计算机如果成功诞生，现在通行于银行及网络等处的RSA加密算法可以破解，也会瓦解所有基于大质数因式分解算力逆天而衍生出的加密算法。 后续会对iOS证书签名相关原理进行分析，同时把常见的加密算法做一下梳理和比较，并附上每种算法在iOS中的代码实现。欢迎一起交流学习心得~]]></content>
  </entry>
  <entry>
    <title><![CDATA[如何成为有效学习的高手]]></title>
    <url>%2F2019%2F01%2F05%2F%E5%A6%82%E4%BD%95%E6%88%90%E4%B8%BA%E6%9C%89%E6%95%88%E5%AD%A6%E4%B9%A0%E7%9A%84%E9%AB%98%E6%89%8B%2F</url>
    <content type="text"><![CDATA[不闲言赘语，直戳痛点，放下借口，共同面对内心的忐忑吧。 注：本文为得到专栏付费课程学习心得，分享给大家一起加快成长速度。 &emsp;高效学习，它没有一种准确的定义，它更是对一种学习状态的描述，一万小时理论我们都听过，但这个理论可能不适合我们99.9%的人，我想这个理论出现的目的其实是为了推翻人们对于天才的迷信，但是，一万小时理论所展现的那种学习或者说练习的场景跟你和我的生活、工作离得都很远，我们也不需要都成为世界级的高手。这个理论本身没有错，它在打破人们对于天才的迷信的同时，也打击了绝大部分成年人的信心：谁有功夫每天8小时练习，练10年呢？但我们常常需要在很短的时间里要掌握一些技能，而且要达到专业级别的水准，这要求我们必须在有限的业余碎片时间中，高效的有目的的学习，话不多说，进入正题。 让我们从七个关键词着手： 适合自己 学习手法 短时间 注意力 解决难题 设定目标 名师 接下来我会对这七个关键词主义展开来探讨，学习如何将他们有机的结合起来，形成一套可自控，可循环，甚至是可以升级的学习套路。此篇先消化前两个关键词。 1.找到适合你的学习方法&emsp; 先重点要给大家介绍的两种学习思维，自然主义和结构主义。自然主义是模仿式的学习，自然主义注重文本的本身，什么是文本？就是一门知识或者技能它表面上看起来的样子，遇到什么就学什么，积少成多，以量取胜。学完了就那样了，它就是你自己的了，你就可以去运用了。结构主义它侧重对结构和交互关系的一个认识，它提倡透过表面的现象去寻求底层的关系。也就是说你要学习的是一套能举一反三的系统，这种诉求为的是什么呢？体系化的去学习，学会之后的目的，一定是为了创造，是一种质变，它要的是一种质变。选对学习方式这是第一步。（学习比如像语言、乐器、书法这些东西，你可能要用自然主义的学习方法去学习才更有效果。如果你学比如像医药、艺术，或者经济学，那就应该用结构主义的方式来学了。） &emsp; 再谈谈学习速度和效率的提升，理论上可以分为两个阶段：第一是避免无效学习，也就是选对学习方式。然后就是尽可能通过更好的学习策略来把这个有效变为高效。最简单有效的技巧就是 ： &emsp; 把你的目标要拆碎，针对那些细节进行反复的练习。不要一开始就照顾全局。 如果还能以碎片化的方式挤出更多的时间来学习的话，那效果会更好。 碎片化学习的真相&emsp; 碎片化学习的真相是碎片化学习一定要基于搜索，搜索是什么意思？意思就是你要带着困惑和问题去执行碎片化的学习，最终的效果一定是要把这些碎片给链接起来。在一段时间内，你的头脑当中应该始终有一个课题，这些碎片它不是满地的落叶，而是我们可以把它比喻成一个打碎的瓷器所产生的碎片。你要有目的的去拾获这些碎片，而不是乱捡。就算碎片化知识是树叶，你也得先有树根、树干和树枝。碎片化学习要的是枝繁叶茂，而不是捡几片树叶回来夹在书里边。那就属于一种情绪化的行为。 &emsp; 话说回来，碎片化学习它终究是有局限性的，因为它缺乏思考，缺乏辩论，缺乏与人交流的这些环节。所谓学而不思则罔嘛。碎片划拉的越多，可能越糊涂了。但是，无论如何，碎片化学习作为一种成年人学习的补充手段，无疑它是有很大力量的。 &emsp; 我必须还要提醒你一件事情！！！有一种假的碎片化学习叫做收藏。你一定对这个东西非常熟悉，收藏这个按钮是非常常见的，在很多app和软件当中，所谓一种人性化的设置。它的存在能够非常大程度缓解人们的焦虑。但这种缓解它其实不是真正的缓解，它只是给你造成一种幻觉，就是收藏了这些知识就是你的了。但其实，如果你收藏完了不看的话，你不去碰它，它并不是你的。你必须要破除掉这种幻觉。 2.不谈兴趣，用任务驱动学习&emsp; 学习，很多人提倡培养兴趣，让自己爱上学习，通常这些人最后都放弃了。以至于慢慢的习惯了没兴趣所以学不会、学不好的自我认知。学不会：连门都没入，这可能确实跟天赋有关，你让身高一米五的去打NBA这种情况我们就不讨论了；学不好：没达到某种专业的程度。兴趣无疑是最好的老师，这句话没毛病，但是如果明明没兴趣的东西，非要让你喜欢上它，这显然是极小概率事件，生活没时间给你去玩小概率。 &emsp; 一个很浅显的道理，人做任何事都是要回报的，所以一个人能带着多大的痛苦去做一件事，那是因为做成了这事儿会收获更大的利益。人做事的驱动有两个方面，一个是内部驱动，兴趣就是最大的内部驱动；一个是外部驱动，也就是完成目标之后收获的利益，既然你对该做的事没兴趣，那就干脆别浪费心思培养兴趣了，我要说的是，成年人学习不需要培养兴趣，应该用任务来驱动。你可能仍然会说，我没有任务啊，我找不到任务啊。任务到处都是，生活中的任务驱动，职场中的职业强迫，以教为学这些都是任务，找不到任务的唯一可能是你对未来的自己缺少预期。 &emsp; 生活中的驱动，比如厨艺、摄影、英语，现在的食品安全现状你还打算吃多久的外卖？想记录属于自己的美好记忆总觉得拍的照片经不起回味？出国游、面对各种英文文档没有翻译工具寸步难行？职场中的驱动，比如领域专业度、语言表达力、情绪与财富管理，部门每年加薪名额就那么点凭什么让老板优先考虑你呢？经常词不达意引起误会甚至错失良机？任性买买买快三十了还没房没车？以教为学，无论你学了什么，一旦你可以教别人了，你就不再是无业了。而且你还不是给人打工，你是自由职业者。以教为学一方面可以是自己对自己设置的一个任务和目标，不断地督促自己，另一方面其实会让你学的更好更透彻。 &emsp; 补充一点：你在心态上要有一种自觉，自己来聘请自己，让自我预期的小目标不断指引着持续学习，无论你在生活还是工作当中做任何事情都要这样做，不要心血来潮一股猛劲儿三分钟就疲了。 愿你有所收获 ( ゜- ゜)つロ乾杯🍻]]></content>
  </entry>
</search>
